title: "mod-06-song-lyrics"
urls[1]
{urls[1]}
as.character(urls[1])
---
title: "mod-06-song-lyrics"
---
title: "mod-06-song-lyrics"
---
title: "mod-06-song-lyrics"
---
title: "mod-06-song-lyrics"
urls
urls[0]
urls[1]
page <- read_html(urls[1])
#| echo: false
library(tidyverse)
library(rvest)
library(glue)
# Identify the url from where you want to extract data
base_url <- "https://www.billboard.com/charts/greatest-of-all-time-pop-songs-artists"
webpage <- read_html(base_url)
# Get the artist name
artists <- html_nodes(webpage, "h3") %>%
html_text2()
# Get the artist rank
# ranks <- html_nodes(webpage, ".c-label") %>%
#   html_text2()
top_artists <- tibble(
artist = artists) %>%
slice_head(n=50)
# mutate(
# rank = 1:nrow(.)) %>%
# filter(rank <= 10)
first_url_base <- "https://genius.com/artists/"
# first_url <- str_c(c(first_url_base, as.character(top_artists[2,1])), collapse = "")
# first_url <- str_c(c(first_url_base, top_artists$artist$value[1]), collapse = "")
# str_c(c(first_url, as.character(top_artists$artist[1,1])), collapse = "")
# library(glue)
# glue(first_url, as.character(top_artists$artist[1,1]))
urls <- glue('{first_url_base}', '{top_artists$artist}')
# read page for a single artist
page <- read_html(urls[1])
artist_name <- page %>%
html_nodes(".profile_identity-name_iq_and_role_icon") %>%
html_text2()
urls[1]
urls[1]
url_base <- "https://genius.com/artists/"
str_extract(urls[1], url_base)
?str_extract
str_remove(urls[1], url_base)
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# get first song link, scrape lyrics
## read page
lyrics <- read_html(urls_of_songs_one_artist[1])
# get the lyrics
song_lyrics <- lyrics %>%
# html_nodes(".jAzSMw") %>%
html_nodes(".Dzxov") %>%
# html_nodes("a") %>%
html_text2() %>%
str_c(., collapse = " ")
song_name <- lyrics %>%
html_nodes(".iMpFIj") %>%
html_text2()
artist_lyrics <- tibble(
artist = str_remove(urls[1], url_base),
song_title = song_name,
lyric = song_lyrics
)
artist_lyrics
get_lyrics <- function(url_song){
## read page
lyrics_page <- read_html(url_song)
# get the lyrics
song_lyrics <- lyrics_page %>%
# html_nodes(".jAzSMw") %>%
html_nodes(".Dzxov") %>%
# html_nodes("a") %>%
html_text2() %>%
str_c(., collapse = " ")
# get song name
song_name <- lyrics_page %>%
html_nodes(".iMpFIj") %>%
html_text2()
# create tibble
artist_lyrics <- tibble(
song_title = song_name,
lyric = song_lyrics
)
}
lyrics_all_songs_for_one_artist <- map_dfr(urls_of_songs_one_artist, get_lyrics)
lyrics_all_songs_for_one_artist
get_all_artists_and_lyrics <- function(url) {
# read page for a single artist
page <- read_html(url)
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# NOW THIS IS BIG - WE CAN CALL THE EARLIER FUNCTION WE BUILT WITHIN ANOTHER FUNCTION
lyrics_all_songs_for_one_artist <- map_dfr(urls_of_songs_one_artist, get_lyrics)
}
urls
urls[1:2]
page <- read_html(urls[2])
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# print.AsIs(song_links)
urls_of_songs_one_artist
lyrics_all_songs_for_one_artist <- map_dfr(urls_of_songs_one_artist, get_lyrics)
lyrics_all_songs_for_one_artist
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
final_df
# get a single artist
artist_to_eval <- urls[1]
# read page for a single artist
page <- read_html(artist_to_eval)
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# print.AsIs(song_links)
# get first song link, scrape lyrics
## read page
lyrics <- read_html(urls_of_songs_one_artist[1])
# get the lyrics
song_lyrics <- lyrics %>%
# html_nodes(".jAzSMw") %>%
html_nodes(".Dzxov") %>%
# html_nodes("a") %>%
html_text2() %>%
str_c(., collapse = " ")
# get song name
song_name <- lyrics %>%
html_nodes(".iMpFIj") %>%
html_text2()
# create tibble
artist_lyrics <- tibble(
artist = str_remove(artist_to_eval, url_base),
song_title = song_name,
lyric = song_lyrics
)
artist_lyrics
urls_of_songs_one_artist
final_df
final_df %>% add_column("Rihanna")\
final_df %>% add_column("Rihanna")
final_df %>% add_column(artist = "Rihanna")
url
get_all_artists_and_lyrics <- function(url, url_base="https://genius.com/artists/") {
# read page for a single artist
page <- read_html(url)
# get artist name
artist = str_remove(url, url_base)
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# NOW THIS IS BIG - WE CAN CALL THE EARLIER FUNCTION WE BUILT WITHIN ANOTHER FUNCTION
lyrics_all_songs_for_one_artist <- map_dfr(urls_of_songs_one_artist, get_lyrics)
lyrics_all_songs_for_one_artist <- add_column(artist)
}
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
?map
get_all_artists_and_lyrics <- function(url, url_base="https://genius.com/artists/") {
# read page for a single artist
page <- read_html(url)
# # get artist name
# artist = str_remove(url, url_base)
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# NOW THIS IS BIG - WE CAN CALL THE EARLIER FUNCTION WE BUILT WITHIN ANOTHER FUNCTION
# lyrics_all_songs_for_one_artist <- map_dfr(urls_of_songs_one_artist, get_lyrics)
# get artist name
artist = str_remove(url, url_base)
}
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
get_all_artists_and_lyrics <- function(url, url_base="https://genius.com/artists/") {
# # read page for a single artist
# page <- read_html(url)
#
# # # get artist name
# # artist = str_remove(url, url_base)
#
# # get list of song links a single artist
# urls_of_songs_one_artist <- page %>%
#   html_nodes(".mini_card_grid-song") %>%
#   html_element("a") %>%
#   html_attr("href")
# NOW THIS IS BIG - WE CAN CALL THE EARLIER FUNCTION WE BUILT WITHIN ANOTHER FUNCTION
# lyrics_all_songs_for_one_artist <- map_dfr(urls_of_songs_one_artist, get_lyrics)
# get artist name
artist = str_remove(url, url_base)
}
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
url
get_all_artists_and_lyrics <- function(urasdfdasl, url_base="https://genius.com/artists/") {
# # read page for a single artist
# page <- read_html(url)
#
# # # get artist name
# # artist = str_remove(url, url_base)
#
# # get list of song links a single artist
# urls_of_songs_one_artist <- page %>%
#   html_nodes(".mini_card_grid-song") %>%
#   html_element("a") %>%
#   html_attr("href")
# NOW THIS IS BIG - WE CAN CALL THE EARLIER FUNCTION WE BUILT WITHIN ANOTHER FUNCTION
# lyrics_all_songs_for_one_artist <- map_dfr(urls_of_songs_one_artist, get_lyrics)
# get artist name
artist = str_remove(urasdfdasl, url_base)
}
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
urls[1:2]
get_all_artists_and_lyrics <- function(url) {
# # read page for a single artist
# page <- read_html(url)
#
# # # get artist name
# # artist = str_remove(url, url_base)
#
# # get list of song links a single artist
# urls_of_songs_one_artist <- page %>%
#   html_nodes(".mini_card_grid-song") %>%
#   html_element("a") %>%
#   html_attr("href")
# NOW THIS IS BIG - WE CAN CALL THE EARLIER FUNCTION WE BUILT WITHIN ANOTHER FUNCTION
# lyrics_all_songs_for_one_artist <- map_dfr(urls_of_songs_one_artist, get_lyrics)
# get artist name
artist = str_remove(url, "https://genius.com/artists/")
}
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
final_df
#| echo: false
library(tidyverse)
library(rvest)
library(glue)
# Identify the url from where you want to extract data
base_url <- "https://www.billboard.com/charts/greatest-of-all-time-pop-songs-artists"
webpage <- read_html(base_url)
# Get the artist name
artists <- html_nodes(webpage, "h3") %>%
html_text2()
# Get the artist rank
# ranks <- html_nodes(webpage, ".c-label") %>%
#   html_text2()
top_artists <- tibble(
artist = artists) %>%
slice_head(n=50)
# mutate(
# rank = 1:nrow(.)) %>%
# filter(rank <= 10)
url_base <- "https://genius.com/artists/"
# first_url <- str_c(c(first_url_base, as.character(top_artists[2,1])), collapse = "")
# first_url <- str_c(c(first_url_base, top_artists$artist$value[1]), collapse = "")
# str_c(c(first_url, as.character(top_artists$artist[1,1])), collapse = "")
# library(glue)
# glue(first_url, as.character(top_artists$artist[1,1]))
urls <- glue('{url_base}', '{top_artists$artist}')
urls[1:2]
get_all_artists_and_lyrics <- function(url) {
# # read page for a single artist
# page <- read_html(url)
#
# # # get artist name
# # artist = str_remove(url, url_base)
#
# # get list of song links a single artist
# urls_of_songs_one_artist <- page %>%
#   html_nodes(".mini_card_grid-song") %>%
#   html_element("a") %>%
#   html_attr("href")
# NOW THIS IS BIG - WE CAN CALL THE EARLIER FUNCTION WE BUILT WITHIN ANOTHER FUNCTION
# lyrics_all_songs_for_one_artist <- map_dfr(urls_of_songs_one_artist, get_lyrics)
# get artist name
artist = str_remove(url, "https://genius.com/artists/")
}
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
final_df <- map_dfr(urls, get_all_artists_and_lyrics)
urls
?str_remove
artist = str_remove(urls, "https://genius.com/artists/")
artist
url_song
top_artists
{top_artists}
{top_artists$artist}
top_artists$artist
artist_link
# get a single artist
artist_link <- str_c(c(url_base, as.character(top_artists$artist[1,1])), collapse = "")
top_artists$artist[1,1]
top_artists
top_artists$artist
top_artists$artist[1]
# get a single artist
artist_link <- str_c(c(url_base, as.character(top_artists$artist[1])), collapse = "")
artist_link
as.character(top_artists$artist[1])
artist = as.character(top_artists$artist[1])
artist
artist_link <- str_c(c(url_base, artist), collapse = "")
artist_link
# get a single artist
artist = as.character(top_artists$artist[1])
artist_link <- str_c(c(url_base, artist), collapse = "")
# read page for a single artist
page <- read_html(artist_link)
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# print.AsIs(song_links)
# get first song link, scrape lyrics
## read page
lyrics <- read_html(urls_of_songs_one_artist[1])
# get the lyrics
song_lyrics <- lyrics %>%
# html_nodes(".jAzSMw") %>%
html_nodes(".Dzxov") %>%
# html_nodes("a") %>%
html_text2() %>%
str_c(., collapse = " ")
# get song name
song_name <- lyrics %>%
html_nodes(".iMpFIj") %>%
html_text2()
# create tibble
artist_lyrics <- tibble(
#artist = str_remove(artist_link, url_base),
artist = artist,
song_title = song_name,
lyric = song_lyrics
)
artist_lyrics
get_all_artists_and_lyrics <- function(url) {
# read page for a single artist
page <- read_html(url)
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# run function that returns all the songs and lyrics
lyrics_all_songs_for_one_artist <- map_dfr(urls_of_songs_one_artist, get_lyrics)
}
url_base <- "https://genius.com/artists/"
urls <- glue('{url_base}', '{top_artists$artist}')
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
get_lyrics <- function(url_song){
## read page
lyrics_page <- read_html(url_song)
# get the lyrics
song_lyrics <- lyrics_page %>%
# html_nodes(".jAzSMw") %>%
html_nodes(".Dzxov") %>%
# html_nodes("a") %>%
html_text2() %>%
str_c(., collapse = " ")
# get song name
song_name <- lyrics_page %>%
html_nodes(".iMpFIj") %>%
html_text2()
# create tibble
artist_lyrics <- tibble(
song_title = song_name,
lyric = song_lyrics
)
}
lyrics_all_songs_for_one_artist <- map_dfr(urls_of_songs_one_artist, get_lyrics)
lyrics_all_songs_for_one_artist
get_all_artists_and_lyrics <- function(url) {
# read page for a single artist
page = read_html(url)
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# run function that returns all the songs and lyrics
lyrics_all_songs_for_one_artist = map_dfr(urls_of_songs_one_artist, get_lyrics)
}
url_base <- "https://genius.com/artists/"
urls <- glue('{url_base}', '{top_artists$artist}')
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
final_df
get_all_artists_and_lyrics <- function(url) {
# read page for a single artist
page = read_html(url)
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# run function that returns all the songs and lyrics
lyrics_all_songs_for_one_artist = map_dfr(urls_of_songs_one_artist, get_lyrics)
lyrics_all_songs_for_one_artist = lyrics_all_songs_for_one_artist %>% add_column(url)
}
url_base <- "https://genius.com/artists/"
urls <- glue('{url_base}', '{top_artists$artist}')
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
final_df
get_all_artists_and_lyrics <- function(url, url_base) {
# read page for a single artist
page = read_html(url)
# get artist name
artist = str_extract(url, url_base)
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# run function that returns all the songs and lyrics
lyrics_all_songs_for_one_artist = map_dfr(urls_of_songs_one_artist, get_lyrics)
lyrics_all_songs_for_one_artist = lyrics_all_songs_for_one_artist %>% add_column(artist)
}
url_base <- "https://genius.com/artists/"
urls <- glue('{url_base}', '{top_artists$artist}')
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
get_all_artists_and_lyrics <- function(url, url_base) {
# read page for a single artist
page = read_html(url)
# get artist name
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# run function that returns all the songs and lyrics
lyrics_all_songs_for_one_artist = map_dfr(urls_of_songs_one_artist, get_lyrics)
lyrics_all_songs_for_one_artist = lyrics_all_songs_for_one_artist %>% add_column(artist)
}
url_base <- "https://genius.com/artists/"
urls <- glue('{url_base}', '{top_artists$artist}')
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
final_df
get_all_artists_and_lyrics <- function(url) {
# read page for a single artist
page = read_html(url)
# get artist name
artist = str_extract(url, "https://genius.com/artists/")
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# run function that returns all the songs and lyrics
lyrics_all_songs_for_one_artist = map_dfr(urls_of_songs_one_artist, get_lyrics)
lyrics_all_songs_for_one_artist = lyrics_all_songs_for_one_artist %>% add_column(artist)
}
url_base <- "https://genius.com/artists/"
urls <- glue('{url_base}', '{top_artists$artist}')
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
final_df
get_all_artists_and_lyrics <- function(url) {
# read page for a single artist
page = read_html(url)
# get artist name
artist = str_extract(url, "https://genius.com/artists/")
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# run function that returns all the songs and lyrics
lyrics_all_songs_for_one_artist = map_dfr(urls_of_songs_one_artist, get_lyrics)
lyrics_all_songs_for_one_artist = lyrics_all_songs_for_one_artist %>% add_column(artist)
}
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
final_df
final_df
final_df$artist
get_all_artists_and_lyrics <- function(url) {
# read page for a single artist
page = read_html(url)
# get artist name
artist = str_remove(url, "https://genius.com/artists/")
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# run function that returns all the songs and lyrics
lyrics_all_songs_for_one_artist = map_dfr(urls_of_songs_one_artist, get_lyrics)
lyrics_all_songs_for_one_artist = lyrics_all_songs_for_one_artist %>% add_column(artist)
}
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
final_df
?distinct
library(tidyverse)
?distinct
install.packages("maps")
install.packages("tufte")
install.packages("ggridges")

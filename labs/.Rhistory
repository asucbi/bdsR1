# lyrics_all_songs_for_one_artist <- map_dfr(urls_of_songs_one_artist, get_lyrics)
# get artist name
artist = str_remove(url, "https://genius.com/artists/")
}
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
final_df <- map_dfr(urls, get_all_artists_and_lyrics)
urls
?str_remove
artist = str_remove(urls, "https://genius.com/artists/")
artist
url_song
top_artists
{top_artists}
{top_artists$artist}
top_artists$artist
artist_link
# get a single artist
artist_link <- str_c(c(url_base, as.character(top_artists$artist[1,1])), collapse = "")
top_artists$artist[1,1]
top_artists
top_artists$artist
top_artists$artist[1]
# get a single artist
artist_link <- str_c(c(url_base, as.character(top_artists$artist[1])), collapse = "")
artist_link
as.character(top_artists$artist[1])
artist = as.character(top_artists$artist[1])
artist
artist_link <- str_c(c(url_base, artist), collapse = "")
artist_link
# get a single artist
artist = as.character(top_artists$artist[1])
artist_link <- str_c(c(url_base, artist), collapse = "")
# read page for a single artist
page <- read_html(artist_link)
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# print.AsIs(song_links)
# get first song link, scrape lyrics
## read page
lyrics <- read_html(urls_of_songs_one_artist[1])
# get the lyrics
song_lyrics <- lyrics %>%
# html_nodes(".jAzSMw") %>%
html_nodes(".Dzxov") %>%
# html_nodes("a") %>%
html_text2() %>%
str_c(., collapse = " ")
# get song name
song_name <- lyrics %>%
html_nodes(".iMpFIj") %>%
html_text2()
# create tibble
artist_lyrics <- tibble(
#artist = str_remove(artist_link, url_base),
artist = artist,
song_title = song_name,
lyric = song_lyrics
)
artist_lyrics
get_all_artists_and_lyrics <- function(url) {
# read page for a single artist
page <- read_html(url)
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# run function that returns all the songs and lyrics
lyrics_all_songs_for_one_artist <- map_dfr(urls_of_songs_one_artist, get_lyrics)
}
url_base <- "https://genius.com/artists/"
urls <- glue('{url_base}', '{top_artists$artist}')
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
get_lyrics <- function(url_song){
## read page
lyrics_page <- read_html(url_song)
# get the lyrics
song_lyrics <- lyrics_page %>%
# html_nodes(".jAzSMw") %>%
html_nodes(".Dzxov") %>%
# html_nodes("a") %>%
html_text2() %>%
str_c(., collapse = " ")
# get song name
song_name <- lyrics_page %>%
html_nodes(".iMpFIj") %>%
html_text2()
# create tibble
artist_lyrics <- tibble(
song_title = song_name,
lyric = song_lyrics
)
}
lyrics_all_songs_for_one_artist <- map_dfr(urls_of_songs_one_artist, get_lyrics)
lyrics_all_songs_for_one_artist
get_all_artists_and_lyrics <- function(url) {
# read page for a single artist
page = read_html(url)
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# run function that returns all the songs and lyrics
lyrics_all_songs_for_one_artist = map_dfr(urls_of_songs_one_artist, get_lyrics)
}
url_base <- "https://genius.com/artists/"
urls <- glue('{url_base}', '{top_artists$artist}')
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
final_df
get_all_artists_and_lyrics <- function(url) {
# read page for a single artist
page = read_html(url)
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# run function that returns all the songs and lyrics
lyrics_all_songs_for_one_artist = map_dfr(urls_of_songs_one_artist, get_lyrics)
lyrics_all_songs_for_one_artist = lyrics_all_songs_for_one_artist %>% add_column(url)
}
url_base <- "https://genius.com/artists/"
urls <- glue('{url_base}', '{top_artists$artist}')
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
final_df
get_all_artists_and_lyrics <- function(url, url_base) {
# read page for a single artist
page = read_html(url)
# get artist name
artist = str_extract(url, url_base)
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# run function that returns all the songs and lyrics
lyrics_all_songs_for_one_artist = map_dfr(urls_of_songs_one_artist, get_lyrics)
lyrics_all_songs_for_one_artist = lyrics_all_songs_for_one_artist %>% add_column(artist)
}
url_base <- "https://genius.com/artists/"
urls <- glue('{url_base}', '{top_artists$artist}')
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
get_all_artists_and_lyrics <- function(url, url_base) {
# read page for a single artist
page = read_html(url)
# get artist name
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# run function that returns all the songs and lyrics
lyrics_all_songs_for_one_artist = map_dfr(urls_of_songs_one_artist, get_lyrics)
lyrics_all_songs_for_one_artist = lyrics_all_songs_for_one_artist %>% add_column(artist)
}
url_base <- "https://genius.com/artists/"
urls <- glue('{url_base}', '{top_artists$artist}')
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
final_df
get_all_artists_and_lyrics <- function(url) {
# read page for a single artist
page = read_html(url)
# get artist name
artist = str_extract(url, "https://genius.com/artists/")
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# run function that returns all the songs and lyrics
lyrics_all_songs_for_one_artist = map_dfr(urls_of_songs_one_artist, get_lyrics)
lyrics_all_songs_for_one_artist = lyrics_all_songs_for_one_artist %>% add_column(artist)
}
url_base <- "https://genius.com/artists/"
urls <- glue('{url_base}', '{top_artists$artist}')
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
final_df
get_all_artists_and_lyrics <- function(url) {
# read page for a single artist
page = read_html(url)
# get artist name
artist = str_extract(url, "https://genius.com/artists/")
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# run function that returns all the songs and lyrics
lyrics_all_songs_for_one_artist = map_dfr(urls_of_songs_one_artist, get_lyrics)
lyrics_all_songs_for_one_artist = lyrics_all_songs_for_one_artist %>% add_column(artist)
}
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
final_df
final_df
final_df$artist
get_all_artists_and_lyrics <- function(url) {
# read page for a single artist
page = read_html(url)
# get artist name
artist = str_remove(url, "https://genius.com/artists/")
# get list of song links a single artist
urls_of_songs_one_artist <- page %>%
html_nodes(".mini_card_grid-song") %>%
html_element("a") %>%
html_attr("href")
# run function that returns all the songs and lyrics
lyrics_all_songs_for_one_artist = map_dfr(urls_of_songs_one_artist, get_lyrics)
lyrics_all_songs_for_one_artist = lyrics_all_songs_for_one_artist %>% add_column(artist)
}
final_df <- map_dfr(urls[1:2], get_all_artists_and_lyrics)
final_df
?distinct
library(tidyverse)
?distinct
install.packages("maps")
install.packages("tufte")
install.packages("ggridges")
statements
library(robotstxt)
library(rvest)
library(tidyverse)
# <div class="col col-4 col-right has-topnote rate-film">
#   <label>Rating</label>
#   <p class="note -topnote rating-text"></p>
#     <input id="frm-rating" name="rating" type="range" min="0" max="10" step="1" value="0"/>
#       <div class="rateit" data-rateit-backingfld="#frm-rating" data-rateit-starwidth="13" data-rateit-starheight="26" data-rateit-resetable="true"></div>
#         </div>
#         </div>
# 01-scrape-page-one ------------------------------------------------------
# check permission --------------------------------------------------------
paths_allowed("https://letterboxd.com/", warn=FALSE)
# set url ----------------------------------------------------------------------
first_url <- "https://letterboxd.com/film/la-la-land/"
# read first page --------------------------------------------------------------
page <- read_html(first_url)
# Exercise 1: scrape statements ----------------------------------------------------------------
### Statement
statements <- page %>%
html_nodes(".rating") %>%
html_text2
statements
library(robotstxt)
library(rvest)
library(tidyverse)
# <div class="col col-4 col-right has-topnote rate-film">
#   <label>Rating</label>
#   <p class="note -topnote rating-text"></p>
#     <input id="frm-rating" name="rating" type="range" min="0" max="10" step="1" value="0"/>
#       <div class="rateit" data-rateit-backingfld="#frm-rating" data-rateit-starwidth="13" data-rateit-starheight="26" data-rateit-resetable="true"></div>
#         </div>
#         </div>
# 01-scrape-page-one ------------------------------------------------------
# check permission --------------------------------------------------------
paths_allowed("https://letterboxd.com/", warn=FALSE)
# set url ----------------------------------------------------------------------
first_url <- "https://letterboxd.com/film/la-la-land/"
# read first page --------------------------------------------------------------
page <- read_html(first_url)
# Exercise 1: scrape statements ----------------------------------------------------------------
### Statement
statements <- page %>%
html_nodes(".Rating") %>%
html_text2
statements
library(robotstxt)
library(rvest)
library(tidyverse)
# <div class="col col-4 col-right has-topnote rate-film">
#   <label>Rating</label>
#   <p class="note -topnote rating-text"></p>
#     <input id="frm-rating" name="rating" type="range" min="0" max="10" step="1" value="0"/>
#       <div class="rateit" data-rateit-backingfld="#frm-rating" data-rateit-starwidth="13" data-rateit-starheight="26" data-rateit-resetable="true"></div>
#         </div>
#         </div>
# 01-scrape-page-one ------------------------------------------------------
# check permission --------------------------------------------------------
paths_allowed("https://letterboxd.com/", warn=FALSE)
# set url ----------------------------------------------------------------------
first_url <- "https://letterboxd.com/film/la-la-land/"
# read first page --------------------------------------------------------------
page <- read_html(first_url)
# Exercise 1: scrape statements ----------------------------------------------------------------
### Statement
statements <- page %>%
html_nodes(".rating") %>%
html_text2
statements
library(robotstxt)
library(rvest)
library(tidyverse)
# <div class="col col-4 col-right has-topnote rate-film">
#   <label>Rating</label>
#   <p class="note -topnote rating-text"></p>
#     <input id="frm-rating" name="rating" type="range" min="0" max="10" step="1" value="0"/>
#       <div class="rateit" data-rateit-backingfld="#frm-rating" data-rateit-starwidth="13" data-rateit-starheight="26" data-rateit-resetable="true"></div>
#         </div>
#         </div>
# 01-scrape-page-one ------------------------------------------------------
# check permission --------------------------------------------------------
paths_allowed("https://letterboxd.com/", warn=FALSE)
# set url ----------------------------------------------------------------------
first_url <- "https://letterboxd.com/film/la-la-land/"
# read first page --------------------------------------------------------------
page <- read_html(first_url)
# Exercise 1: scrape statements ----------------------------------------------------------------
### Statement
statements <- page %>%
html_nodes(".rating-text") %>%
html_text2
statements
library(robotstxt)
library(rvest)
library(tidyverse)
# <div class="col col-4 col-right has-topnote rate-film">
#   <label>Rating</label>
#   <p class="note -topnote rating-text"></p>
#     <input id="frm-rating" name="rating" type="range" min="0" max="10" step="1" value="0"/>
#       <div class="rateit" data-rateit-backingfld="#frm-rating" data-rateit-starwidth="13" data-rateit-starheight="26" data-rateit-resetable="true"></div>
#         </div>
#         </div>
# 01-scrape-page-one ------------------------------------------------------
# check permission --------------------------------------------------------
paths_allowed("https://letterboxd.com/", warn=FALSE)
# set url ----------------------------------------------------------------------
first_url <- "https://letterboxd.com/film/la-la-land/"
# read first page --------------------------------------------------------------
page <- read_html(first_url)
# Exercise 1: scrape statements ----------------------------------------------------------------
### Statement
statements <- page %>%
html_nodes("rating-text") %>%
html_text2
statements
library(robotstxt)
library(rvest)
library(tidyverse)
# <div class="col col-4 col-right has-topnote rate-film">
#   <label>Rating</label>
#   <p class="note -topnote rating-text"></p>
#     <input id="frm-rating" name="rating" type="range" min="0" max="10" step="1" value="0"/>
#       <div class="rateit" data-rateit-backingfld="#frm-rating" data-rateit-starwidth="13" data-rateit-starheight="26" data-rateit-resetable="true"></div>
#         </div>
#         </div>
# 01-scrape-page-one ------------------------------------------------------
# check permission --------------------------------------------------------
paths_allowed("https://letterboxd.com/", warn=FALSE)
# set url ----------------------------------------------------------------------
first_url <- "https://letterboxd.com/film/la-la-land/"
# read first page --------------------------------------------------------------
page <- read_html(first_url)
# Exercise 1: scrape statements ----------------------------------------------------------------
### Statement
statements <- page %>%
html_nodes(".frm-rating") %>%
html_text2
statements
library(robotstxt)
library(rvest)
library(tidyverse)
# <div class="col col-4 col-right has-topnote rate-film">
#   <label>Rating</label>
#   <p class="note -topnote rating-text"></p>
#     <input id="frm-rating" name="rating" type="range" min="0" max="10" step="1" value="0"/>
#       <div class="rateit" data-rateit-backingfld="#frm-rating" data-rateit-starwidth="13" data-rateit-starheight="26" data-rateit-resetable="true"></div>
#         </div>
#         </div>
# 01-scrape-page-one ------------------------------------------------------
# check permission --------------------------------------------------------
paths_allowed("https://letterboxd.com/", warn=FALSE)
# set url ----------------------------------------------------------------------
first_url <- "https://letterboxd.com/film/la-la-land/"
# read first page --------------------------------------------------------------
page <- read_html(first_url)
# Exercise 1: scrape statements ----------------------------------------------------------------
### Statement
statements <- page %>%
html_nodes(".rateit") %>%
html_text2
statements
library(robotstxt)
library(rvest)
library(tidyverse)
# <div class="col col-4 col-right has-topnote rate-film">
#   <label>Rating</label>
#   <p class="note -topnote rating-text"></p>
#     <input id="frm-rating" name="rating" type="range" min="0" max="10" step="1" value="0"/>
#       <div class="rateit" data-rateit-backingfld="#frm-rating" data-rateit-starwidth="13" data-rateit-starheight="26" data-rateit-resetable="true"></div>
#         </div>
#         </div>
# 01-scrape-page-one ------------------------------------------------------
# check permission --------------------------------------------------------
paths_allowed("https://letterboxd.com/", warn=FALSE)
# set url ----------------------------------------------------------------------
first_url <- "https://letterboxd.com/film/la-la-land/"
# read first page --------------------------------------------------------------
page <- read_html(first_url)
# Exercise 1: scrape statements ----------------------------------------------------------------
### Statement
statements <- page %>%
html_nodes(".note -topnote rating-text") %>%
html_text2
statements
library(robotstxt)
library(rvest)
library(tidyverse)
# <div class="col col-4 col-right has-topnote rate-film">
#   <label>Rating</label>
#   <p class="note -topnote rating-text"></p>
#     <input id="frm-rating" name="rating" type="range" min="0" max="10" step="1" value="0"/>
#       <div class="rateit" data-rateit-backingfld="#frm-rating" data-rateit-starwidth="13" data-rateit-starheight="26" data-rateit-resetable="true"></div>
#         </div>
#         </div>
# 01-scrape-page-one ------------------------------------------------------
# check permission --------------------------------------------------------
paths_allowed("https://letterboxd.com/", warn=FALSE)
# set url ----------------------------------------------------------------------
first_url <- "https://letterboxd.com/film/la-la-land/"
# read first page --------------------------------------------------------------
page <- read_html(first_url)
# Exercise 1: scrape statements ----------------------------------------------------------------
### Statement
statements <- page %>%
html_nodes("note -topnote rating-text") %>%
html_text2
statements
### Statement
statements <- page %>%
html_nodes("rate-film") %>%
html_text2
statements
statements <- page %>%
html_nodes(".rate-film") %>%
html_text2
statements
### Statement
statements <- page %>%
html_nodes(".ratingValue") %>%
html_text2
statements
### Statement
statements <- page %>%
html_nodes("ratingValue") %>%
html_text2
statements
statements <- page %>%
html_nodes("aggregateRating") %>%
html_text2
statements
statements <- page %>%
html_nodes(".aggregateRating") %>%
html_text2
statements
first_url <- "https://letterboxd.com/film/la-la-land/"
# read first page --------------------------------------------------------------
page <- read_html(first_url)
# Exercise 1: scrape statements ----------------------------------------------------------------
# Extract the content of the <script> tag containing the JSON-LD data
script_content <- webpage %>%
html_nodes('script[type="application/ld+json"]') %>%
html_text()
library(robotstxt)
library(rvest)
library(httr)
library(jsonlite)
library(tidyverse)
# Fetch the webpage using httr::GET
url <- "https://letterboxd.com/film/la-la-land/"
response <- GET(url)
# Parse the response content as HTML
webpage <- read_html(content(response, "text"))
# Extract the JSON-LD script tag content
script_content <- webpage %>%
html_nodes('script[type="application/ld+json"]') %>%
html_text()
# Parse the JSON content
json_data <- fromJSON(script_content)
# View the parsed JSON data
print(json_data)
library(robotstxt)
library(rvest)
library(httr)
library(jsonlite)
library(tidyverse)
# <div class="col col-4 col-right has-topnote rate-film">
#   <label>Rating</label>
#   <p class="note -topnote rating-text"></p>
#     <input id="frm-rating" name="rating" type="range" min="0" max="10" step="1" value="0"/>
#       <div class="rateit" data-rateit-backingfld="#frm-rating" data-rateit-starwidth="13" data-rateit-starheight="26" data-rateit-resetable="true"></div>
#         </div>
#         </div>
# Fetch the webpage using httr::GET
url <- "https://letterboxd.com/film/la-la-land/"
response <- GET(url)
# Parse the response content as HTML
webpage <- read_html(content(response, "text"))
# Extract the JSON-LD script tag content
script_content <- webpage %>%
html_nodes('script[type="application/ld+json"]') %>%
html_text()
# Parse the JSON content
json_data <- fromJSON(script_content)
# View the parsed JSON data
print(json_data)
# Access the rating value
rating_value <- json_data$aggregateRating$ratingValue
# Print the rating value
print(rating_value)

ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count), color = "blue") +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.2) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count), color = "blue") +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.2) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.2) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
# geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_point(aes(size = count)) +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.2) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
# geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_point(aes(size = count)) +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
# geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_point(aes(size = count)) +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1, alpha = 0.5) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
# geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_point(aes(size = count)) +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1, alpha = 0.5) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=50)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Perceived Emotionality of 911 Caller",
y = "Suspicion Toward 911 Caller",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
# geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_point(aes(size = count)) +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1, alpha = 0.5) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=200)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Perceived Emotionality of 911 Caller",
y = "Suspicion Toward 911 Caller",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
# geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_point(aes(size = count)) +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1, alpha = 0.5) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Perceived Emotionality of 911 Caller",
y = "Suspicion Toward 911 Caller",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
# geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_point(aes(size = count)) +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1, alpha = 0.5) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=75)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Perceived Emotionality of 911 Caller",
y = "Suspicion Toward 911 Caller",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
# geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_point(aes(size = count)) +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1, alpha = 0.5) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=50)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Perceived Emotionality of 911 Caller",
y = "Suspicion Toward 911 Caller",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
# geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_point(aes(size = count)) +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1, alpha = 0.5) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Perceived Emotionality of 911 Caller",
y = "Suspicion Toward 911 Caller",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
# geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_point(aes(size = count)) +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1, alpha = 0.5) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
# labs(title = "Average Suspicion by Emotion Level",
labs(x = "Perceived Emotionality of 911 Caller",
y = "Suspicion Toward 911 Caller",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
# geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_point(aes(size = count)) +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1, alpha = 0.5) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
# labs(title = "Average Suspicion by Emotion Level",
labs(x = "Perceived Emotionality of 911 Caller",
y = "Suspicion Toward 911 Caller",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
ggsave("911avgsuspEmot.pdf", width = 4, height = 4)
getwd()
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
# geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_point(aes(size = count)) +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1, alpha = 0.5) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
# labs(title = "Average Suspicion by Emotion Level",
labs(x = "Perceived Emotionality of 911 Caller",
y = "Suspicion Toward 911 Caller",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
# ggsave("911avgsuspEmot.pdf", width = 4, height = 4)
ggsave("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/911avgsuspEmot.pdf")
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
# geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_point(aes(size = count)) +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1, alpha = 0.5) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
# labs(title = "Average Suspicion by Emotion Level",
labs(x = "Perceived Emotionality of 911 Caller",
y = "Suspicion Toward 911 Caller",
size = "Number of Data Points\nContributing to Average") +
theme_minimal(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
# geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_point(aes(size = count)) +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1, alpha = 0.5) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
# labs(title = "Average Suspicion by Emotion Level",
labs(x = "Perceived Emotionality of 911 Caller",
y = "Suspicion Toward 911 Caller",
size = "Number of Data Points\nContributing to Average") +
theme_minimal(base_size = 18)
# ggsave("911avgsuspEmot.pdf", width = 4, height = 4)
# ggsave("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/911avgsuspEmot.pdf")
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
# geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_point(aes(size = count)) +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1, alpha = 0.5) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
# labs(title = "Average Suspicion by Emotion Level",
labs(x = "Perceived Emotionality of 911 Caller",
y = "Suspicion Toward 911 Caller",
size = "Number of Data Points\nContributing to Average") +
theme_minimal(base_size = 16)
# ggsave("911avgsuspEmot.pdf", width = 4, height = 4)
# ggsave("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/911avgsuspEmot.pdf")
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
# geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_point(aes(size = count)) +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1, alpha = 0.5) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
# labs(title = "Average Suspicion by Emotion Level",
labs(x = "Perceived Emotionality of 911 Caller",
y = "Suspicion Toward 911 Caller",
size = "Number of Data Points\nContributing to Average") +
theme_minimal(base_size = 16)
# ggsave("911avgsuspEmot.pdf", width = 4, height = 4)
ggsave("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/911avgsuspEmot.pdf")
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
# geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_point(aes(size = count)) +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1, alpha = 0.5) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
# labs(title = "Average Suspicion by Emotion Level",
labs(x = "Perceived Emotionality of 911 Caller",
y = "Suspicion Toward 911 Caller",
size = "Number of Data Points\nContributing to Average") +
theme_minimal(base_size = 16)
# ggsave("911avgsuspEmot.pdf", width = 4, height = 4)
ggsave("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/911avgsuspEmot.pdf")
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
# geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_point(aes(size = count)) +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1, alpha = 0.5) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
# labs(title = "Average Suspicion by Emotion Level",
labs(x = "Perceived Emotionality of 911 Caller",
y = "Suspicion Toward 911 Caller",
size = "Number of Data Points\nContributing to Average") +
theme_minimal(base_size = 16)
# ggsave("911avgsuspEmot.pdf", width = 4, height = 4)
ggsave("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/911avgsuspEmot.pdf")
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
# geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_point(aes(size = count)) +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1, alpha = 0.5) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
# labs(title = "Average Suspicion by Emotion Level",
labs(x = "Perceived Emotionality of 911 Caller",
y = "Suspicion Toward 911 Caller",
size = "Number of Data Points\nContributing to Average") +
theme_minimal(base_size = 16)
# ggsave("911avgsuspEmot.pdf", width = 4, height = 4)
ggsave("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/911avgsuspEmot.pdf")
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
# geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_point(aes(size = count)) +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1, alpha = 0.5) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
# labs(title = "Average Suspicion by Emotion Level",
labs(x = "Perceived Emotionality of 911 Caller",
y = "Suspicion Toward 911 Caller",
size = "Number of Data Points\nContributing to Average") +
theme_minimal(base_size = 16)
# ggsave("911avgsuspEmot.pdf", width = 4, height = 4)
ggsave("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/911avgsuspEmot.pdf", width = 8, height = 6)
library(tidyverse)
dataread <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
# Calculate mean Suspicion1 and counts for each bin
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
# geom_point(aes(size = count), color = "grey") +  # Adjusted point sizes based on count
geom_point(aes(size = count)) +  # Adjusted point sizes based on count
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1, alpha = 0.5) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
# labs(title = "Average Suspicion by Emotion Level",
labs(x = "Perceived Emotionality of 911 Caller",
y = "Suspicion Toward 911 Caller",
size = "Number of Data Points\nContributing to Average") +
theme_minimal(base_size = 16)
# ggsave("911avgsuspEmot.pdf", width = 4, height = 4)
ggsave("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/911avgsuspEmot.pdf", width = 9, height = 6)

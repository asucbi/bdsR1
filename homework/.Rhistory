<<<<<<< Updated upstream
<<<<<<< Updated upstream
nrow(pac_all)
pac_all <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/GitProjects/CBI-BDS1/bdsR1/nicksandbox/hw-lab-keys/mod-06-hw-key/data/pac-all.csv")
head(pac_all)
nrow(pac_all)
str(pac_all)
dim(pac_all)
dim(pac_all)[2]
library(tidyverse)
library(rvest)
library(scales)
pac_all <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/GitProjects/CBI-BDS1/bdsR1/nicksandbox/hw-lab-keys/mod-06-hw-key/data/pac-all.csv")
pac_all2 <- pac_all %>% separate(country_parent, c("country", "parent"), sep="/", extra = "merge")
head(pac_all2,n=10)
pac_all3 <- pac_all2 %>%
mutate(total = str_remove(total, "\\$"), total = str_remove_all(total, ",")) %>%
mutate(dems = str_remove(dems, "\\$"), dems = str_remove_all(dems, ",")) %>%
mutate(repubs = str_remove(repubs, "\\$"), repubs = str_remove_all(repubs, ","))
pac_all3$total <- as.integer(pac_all3$total)
pac_all3$dems <- as.integer(pac_all3$dems)
pac_all3$repubs <- as.integer(pac_all3$repubs)
head(pac_all3,n=10)
time <- rep(1:10, 10)
time
response <- rnorm(n) + time + time^2 * 0.5
set.seed(1234)
n <- 100
subject <- factor(rep(1:10, each = 10))
time <- rep(1:10, 10)
response <- rnorm(n) + time + time^2 * 0.5 # quadratic trend
response
ggplot(response) +
geom_line()
plot(response)
library(tidyverse)
getwd()
dataread = read_csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.xlsx")
head(dataread)
dataread = read_csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
head(dataread)
names(dataread)
dataread <- dataread %>% select(Participant, Call1, Suspicion1, CodeCallerGender, Emotion1, EmotionMC)
head(dataread)
library(tidyverse)
library(skimr)
dataread <- read_csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
dataread <- dataread %>% select(Participant, Call1, Suspicion1, CodeCallerGender, Emotion1, EmotionMC)
skim(dataread)
ggplot(dataread, aes(Emotion1)) +
geom_histogram()
ggplot(dataread, aes(Emotion1)) +
geom_histogram()
ggplot(dataread, aes(Emotion1)) +
geom_bar()
ggplot(dataread, aes(Emotion1)) +
geom_bar() + facet_grid(~CodeCallerGender)
ggplot(dataread, aes(Emotion1)) +
geom_bar() + facet_wrap(~CodeCallerGender)
ggplot(dataread, aes(Emotion1)) +
geom_bar() + facet_wrap(CodeCallerGender)
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
geom_point(aes(color=x)) +  # Scatter plot
geom_smooth(method='lm', se=FALSE, color='red') +  # Linear regression line
theme_minimal() +
labs(title="Scatterplot of x and y with Linear Regression Line",
x="Variable X",
y="Variable Y")
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
geom_point(aes(color=Emotion1)) +  # Scatter plot
geom_smooth(method='lm', se=FALSE, color='red') +  # Linear regression line
theme_minimal() +
labs(title="Scatterplot of x and y with Linear Regression Line",
x="Variable X",
y="Variable Y")
pairs(dataread)
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
geom_density_2d_filled() +
theme_minimal() +
labs(title="Density Plot of x and y")
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
geom_point(aes(color=Emotion1)) +  # Scatter plot
geom_smooth(method='lm', se=FALSE, color='red') +  # Linear regression line +
facet_wrap(~CodeCallerGender) +
theme_minimal() +
labs(title="Scatterplot of x and y with Linear Regression Line",
x="Variable X",
y="Variable Y")
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
geom_density_2d_filled() +
theme_minimal() +
labs(title="Density Plot of x and y")
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
geom_point(alpha = .5) +
stat_summary(geom = "point", fun = mean, color = "red", size = 3)
# scale_x_binned(n.breaks = 30)
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
# geom_point(alpha = .5) +
stat_summary(geom = "point", fun = mean, color = "red", size = 3)
# scale_x_binned(n.breaks = 30)
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
# geom_point(alpha = .5) +
stat_summary(geom = "point", fun = mean, color = "red", size = 3) +
facet_wrap(~CodeCallerGender)
dataread$CodeCallerGender
View(dataread)
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
geom_point(aes(color=Emotion1)) +  # Scatter plot
geom_smooth(method='lm', se=FALSE, color='red') +  # Linear regression line +
facet_wrap(~CodeCallerGender) +
theme_minimal() +
labs(title="Scatterplot of x and y with Linear Regression Line",
x="Variable X",
y="Variable Y")
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
# geom_point(alpha = .5) +
stat_summary(geom = "point", fun = mean, color = "red", size = 3) +
facet_wrap(~CodeCallerGender)
# scale_x_binned(n.breaks = 30)
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
geom_point(aes(color=Emotion1)) +  # Scatter plot
geom_smooth(method='lm', se=FALSE, color='red') +  # Linear regression line +
# facet_wrap(~CodeCallerGender) +
theme_minimal() +
labs(title="Scatterplot of x and y with Linear Regression Line",
x="Variable X",
y="Variable Y")
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
# geom_point(alpha = .5) +
stat_summary(geom = "point", fun = mean, color = "red", size = 3)
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
# geom_point(alpha = .5) +
stat_summary(geom = "point", fun = mean, color = "red", size = 3) +
facet_wrap(~CodeCallerGender)
# scale_x_binned(n.breaks = 30)
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
# geom_point(alpha = .5) +
stat_summary(geom = "point", fun = mean, color = "red", size = 3)
# facet_wrap(~CodeCallerGender)
# scale_x_binned(n.breaks = 30)
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
geom_point(aes(color=Emotion1)) +  # Scatter plot
geom_smooth(method='lm', se=FALSE, color='red') +  # Linear regression line +
# facet_wrap(~CodeCallerGender) +
theme_minimal() +
labs(title="Scatterplot of x and y with Linear Regression Line",
x="Variable X",
y="Variable Y")
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
# geom_point(alpha = .5) +
stat_summary(geom = "point", fun = mean, color = "red", size = 3) +
facet_wrap(~CodeCallerGender)
# scale_x_binned(n.breaks = 30)
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
geom_point(aes(color=Emotion1)) +  # Scatter plot
geom_smooth(method='lm', se=FALSE, color='red') +  # Linear regression line +
# facet_wrap(~CodeCallerGender) +
theme_minimal() +
labs(title="Scatterplot of x and y with Linear Regression Line",
x="Variable X",
y="Variable Y")
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
# geom_point(alpha = .5) +
stat_summary(geom = "point", fun = mean, color = "red", size = 3) +
facet_wrap(~CodeCallerGender)
# scale_x_binned(n.breaks = 30)
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n())
df_summary
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
# geom_point(alpha = .5) +
stat_summary(geom = "point", fun = mean, color = "red", size = 3)
# facet_wrap(~CodeCallerGender)
# scale_x_binned(n.breaks = 30)
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count, alpha = 0.7), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=5)) +  # Adjust legend breaks if needed
labs(title = "Average Return by Age Bin",
x = "Age Bin",
y = "Average Return",
size = "Number of Data Points") +
theme_minimal()
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count, alpha = 0.7), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=50)) +  # Adjust legend breaks if needed
labs(title = "Average Return by Age Bin",
x = "Age Bin",
y = "Average Return",
size = "Number of Data Points") +
theme_minimal()
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=50)) +  # Adjust legend breaks if needed
labs(title = "Average Return by Age Bin",
x = "Age Bin",
y = "Average Return",
size = "Number of Data Points") +
theme_minimal()
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=50)) +  # Adjust legend breaks if needed
labs(title = "Average Return by Age Bin",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points") +
theme_minimal()
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=50)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points") +
theme_minimal()
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=50)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points Contributing to Average") +
theme_minimal()
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=50)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points\n Contributing to Average") +
theme_minimal()
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=50)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
df_summary
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.2) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=50)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
df_summary
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.2) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
=======
=======
>>>>>>> Stashed changes
pivot_longer(
c(LeftHipp, Cognition),
names_to = "var"
)
fb %>%
pivot_longer(
c(LeftHipp, Cognition),
names_to = "var"
) %>%
ggplot(aes(x=Group, y = value)) +
geom_boxplot() +
facet_wrap(~var, scales="free")
knitr::opts_chunk$set(
eval = FALSE,
out.width = "80%",
fig.asp = 0.618,
fig.width = 10,
dpi = 300
)
knitr::include_graphics("img/1024px-Clemson_and_Temple.jpg")
library(tidyverse)
library(modelr)
fb <- read_csv("data/FootballBrain.csv") %>%
rename(rt = Cogniton)
head(fb)
fb <- fb %>%
filter(Group != "Control") %>%
drop_na(RT)
fb %>%
pivot_longer(
c(LeftHipp, RT),
names_to = "var"
) %>%
ggplot(aes(x=Group, y = value)) +
geom_boxplot() +
facet_wrap(~var, scales="free")
knitr::opts_chunk$set(
eval = FALSE,
out.width = "80%",
fig.asp = 0.618,
fig.width = 10,
dpi = 300
)
knitr::include_graphics("img/1024px-Clemson_and_Temple.jpg")
library(tidyverse)
library(modelr)
fb <- read_csv("data/FootballBrain.csv") %>%
rename(rt = Cogniton)
head(fb)
knitr::opts_chunk$set(
eval = FALSE,
out.width = "80%",
fig.asp = 0.618,
fig.width = 10,
dpi = 300
)
knitr::include_graphics("img/1024px-Clemson_and_Temple.jpg")
library(tidyverse)
library(modelr)
fb <- read_csv("data/FootballBrain.csv") %>%
rename(RT = Cogniton)
head(fb)
fb <- fb %>%
filter(Group != "Control") %>%
drop_na(RT)
fb <- fb %>%
mutate(Group = relevel(factor(Group), ref= "FBNoConcuss"))
fb %>%
pivot_longer(
c(LeftHipp, RT),
names_to = "var"
) %>%
ggplot(aes(x=Group, y = value)) +
geom_boxplot() +
facet_wrap(~var, scales="free")
summary(lm(LeftHipp ~ Years, fb))
summary(lm(LeftHipp ~ Years + Group, fb))
summary(lm(LeftHipp ~ Years, fb))
summary(lm(LeftHipp ~ Years + Group, fb))
summary(lm(LeftHipp ~ Group, fb))
summary(lm(LeftHipp ~ Years + Group, fb))
summary(lm(RT ~ Years + Group, fb))
summary(lm(RT ~ Years, fb))
summary(lm(RT ~ Years + Group, fb))
summary(lm(RT ~ Years, fb))
summary(lm(RT ~ Years + Group, fb))
summary(lm(RT ~ LeftHipp + Years + Group, fb))
summary(lm(LeftHipp ~ Years, fb))
fb %>%
group_by(Years) %>%
mutate(concuss = if_else(Group == "FBNoConcuss", 0, 1))
summarize(prop = mean(concuss)) %>%
ggplot(aes(x=Years, y = prop )) +
geom_point()
fb %>%
group_by(Years) %>%
mutate(concuss = if_else(Group == "FBNoConcuss", 0, 1)) %>%
summarize(prop = mean(concuss)) %>%
ggplot(aes(x=Years, y = prop )) +
geom_point()
fb %>%
group_by(Years) %>%
mutate(concuss = if_else(Group == "FBNoConcuss", 0, 1)) %>%
summarize(prop = mean(concuss), sd = sd(concuss)) %>%
ggplot(aes(x=Years, y = prop, ymin = prop-sd, ymax=prop+sd)) +
geom_pointrange()
fb %>%
group_by(Years) %>%
mutate(concuss = if_else(Group == "FBNoConcuss", 0, 1)) %>%
summarize(prop = mean(concuss), cnt = n()) %>%
ggplot(aes(x=Years, y = prop, size=cnt)) +
geom_point()
fb %>%
group_by(Years) %>%
mutate(concuss = if_else(Group == "FBNoConcuss", 0, 1)) %>%
summarize(prop = mean(concuss), cnt = n()) %>%
ggplot(aes(x=Years, y = prop, color = cnt)) +
geom_point()
fb %>%
group_by(Years) %>%
mutate(concuss = if_else(Group == "FBNoConcuss", 0, 1)) %>%
summarize(prop = mean(concuss), count = n()) %>%
ggplot(aes(x=Years, y = prop, color = count)) +
geom_point()
fb %>%
group_by(Years) %>%
mutate(concuss = if_else(Group == "FBNoConcuss", 0, 1)) %>%
summarize(prop = mean(concuss), count = n()) %>%
ggplot(aes(x=Years, y = prop, color = count)) +
geom_col()
fb %>%
group_by(Years) %>%
mutate(concuss = if_else(Group == "FBNoConcuss", 0, 1)) %>%
summarize(prop = mean(concuss), count = n()) %>%
ggplot(aes(x=Years, y = prop, color = count)) +
geom_point()
fb %>%
group_by(Years) %>%
mutate(concuss = if_else(Group == "FBNoConcuss", 0, 1)) %>%
summarize(prop = mean(concuss), count = n()) %>%
ggplot(aes(x=Years, y = prop, size = count)) +
geom_point()
fb %>%
group_by(Years) %>%
mutate(concuss = if_else(Group == "FBNoConcuss", 0, 1)) %>%
summarize(prop = mean(concuss), count = n()) %>%
ggplot(aes(x=Years, y = prop, label = count)) +
geom_text()
fb %>%
group_by(Years) %>%
mutate(concuss = if_else(Group == "FBNoConcuss", 0, 1)) %>%
summarize(prop = mean(concuss), count = n()) %>%
ggplot(aes(x=Years, y = prop, size = count)) +
geom_point()
summary(fit1 <- lm(LeftHipp ~ Years, fb))
summary(fit2 <-  lm(LeftHipp ~ Years + Group, fb))
AIC(fit1, fit2)
summary(fit2 <-  lm(Hipp ~ Years + Group, fb))
summary(fit1 <- lm(Hipp ~ Years, fb))
AIC(fit1, fit2)
summary(lm(RT ~ Hipp + Years + Group, fb))
summary(lm(RT ~ Hipp + Years + Group, fb))
summary(lm(RT ~ Hipp + LeftHipp + Years + Group, fb))
summary(lm(RT ~ Hipp + Years + Group, fb))
summary(fit2 <-  lm(Hipp ~ Years*Group, fb))
AIC(fit1, fit2)
summary(fit2 <-  lm(Hipp ~ Years + Group, fb))
summary(lm(RT ~ ., fb))
summary(lm(RT ~ Hipp + Years + Group, fb))
summary(lm(RT ~ Hipp + Group, fb))
summary(lm(RT ~ Group, fb))
summary(lm(RT ~ Hipp + Group, fb))
summary(lm(RT ~ Hipp*Group, fb))
summary(lm(RT ~ Hipp + Group, fb))
summary(lm(RT ~ Hipp + Group, fb))
summary(lm(RT ~ Group, fb))
summary(lm(RT ~ Hipp + Group, fb))
summary(fit2 <-  lm(Hipp ~ Years + Group, fb))
summary(fit1 <- lm(Hipp ~ Years, fb))
summary(fit2 <-  lm(Hipp ~ Years + Group, fb))
AIC(fit1, fit2)
AIC(fit1, fit2)
summary(fit2 <-  lm(Hipp ~ Years + Group, fb))
summary(fit3 <-  lm(Hipp ~ Years * Group, fb))
AIC(fit1, fit2, fit3)
summary(fit5 <- lm(RT ~ Years + Group, fb))
summary(fit5 <- lm(RT ~ Years, fb))
summary(fit5 <- lm(RT ~ Years + Group, fb))
summary(fit5 <- lm(RT ~ Hipp + Years + Group, fb))
summary(fit5 <- lm(RT ~ Hipp + Group, fb))
summary(fit5 <- lm(RT ~ Hipp + Years + Group, fb))
summary(fit5 <- lm(RT ~ Hipp + Years + Group, fb))
summary(fit5 <- lm(RT ~ Hipp + Group, fb))
d <- fb %>%
mutate_at(vars(Hipp, Years, RT), standardize)
center <- function(x){
x - mean(x)
}
standardize <- function(x){
center(x)/sd(x)
}
d <- fb %>%
mutate_at(vars(Hipp, Years, RT), standardize)
summary(lm(RT ~ Years, d))
summary(lm(RT ~ Years + Hipp, d))
summary(lm(RT ~ Years, d))
summary(fit4 <- lm(RT ~ Hipp, fb))
standardize <- function(x){
(x - mean(x))/sd(x)
}
d <- fb_standardized %>%
mutate_at(vars(Hipp, Years, RT), standardize)
standardize <- function(x){
(x - mean(x))/sd(x)
}
fb_standardized <- fb %>%
mutate_at(vars(Hipp, Years, RT), standardize)
fit4_s <- lm(RT ~ Hipp, fb)
summary(lm(fit5_s <- RT ~ Years, fb_standardized))
summary(fit4_s <- lm(RT ~ Hipp, fb))
summary(lm(fit5_s <- RT ~ Years, fb_standardized))
standardize <- function(x){
(x - mean(x))/sd(x)
}
fb_standardized <- fb %>%
mutate_at(vars(Hipp, Years, RT), standardize)
summary(fit4_s <- lm(RT ~ Hipp, fb))
summary(lm(fit5_s <- RT ~ Years, fb_standardized))
standardize <- function(x){
(x - mean(x))/sd(x)
}
fb_standardized <- fb %>%
mutate_at(vars(Hipp, Years, RT), standardize)
summary(fit4_s <- lm(RT ~ Hipp, fb_standardized))
summary(lm(fit5_s <- RT ~ Years, fb_standardized))
coefs(lm(fit5_s <- RT ~ Years, fb_standardized))
standardize <- function(x){
(x - mean(x))/sd(x)
}
fb_standardized <- fb %>%
mutate_at(vars(Hipp, Years, RT), standardize)
coef(fit4_s <- lm(RT ~ Hipp, fb_standardized))
coef(fit5_s <- lm( RT ~ Years, fb_standardized))
standardize <- function(x){
(x - mean(x))/sd(x)
}
fb_standardized <- fb %>%
mutate_at(vars(Hipp, Years, RT), standardize)
coef(fit4_s <- lm(RT ~ Hipp + Years, fb_standardized))
coef(fit5_s <- lm( RT ~ Years, fb_standardized))
coef(fit1_s <- lm(RT ~ Hipp, fb_standardized))
coef(fit2_s <- lm(RT ~ Years, fb_standardized))
coef(fit3_s <- lm(RT ~ Hipp + Years, fb_standardized))
### Exercise 13
coef(fit1_s <- lm(RT ~ Hipp, fb_standardized))
coef(fit2_s <- lm(RT ~ Years, fb_standardized))
coef(fit3_s <- lm(RT ~ Hipp + Years, fb_standardized))
fb <- read_csv("data/FootballBrain.csv")
write_csv(fb, "data/FootballBrain2.csv")
fb <- read_csv("data/FootballBrain2.csv")
head(fb)
fb <- read_csv("data/FootballBrain2.csv")
head(fb)
fb <- read_csv("data/FootballBrain.csv") %>%
rename(RT = Cogniton)
write_csv(fb, "data/FootballBrain2.csv")
fb <- read_csv("data/FootballBrain.csv") %>%
rename(RT = Cogniton)
fb <- read_csv("data/FootballBrain.csv")
head(fb)
head(fb)
library(tidyverse)
data(iris)
iris
summary(lm(Sepal.Length ~ Sepal.Width, iris))
summary(lm(Sepal.Length ~ Pedal.Length, iris))
summary(lm(Sepal.Length ~ Petal.Length, iris))
plot(iris$Sepal.Length, iris$Petal.Length)
summary(lm(Sepal.Length ~ Petal.Length + Species, iris))
library(palmerpenguins)
data("penguins")
penguins
lm(flipper_length_mm ~ body_mass_g, penguins)
summary(lm(flipper_length_mm ~ body_mass_g, penguins))
plot(penguins$flipper_length_mm, penguins$body_mass_g)
plot(penguins$flipper_length_mm, penguins$bill_length_mm)
plot(penguins$bill_length_mm, penguins$body_mass_g)
summary(lm(bill_length_mm ~ body_mass_g, penguins))
head(penguins)
summary(lm(bill_length_mm ~ body_mass_g + species, penguins))
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_length_mm)) +
geom_point()
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +
geom_point()
summary(lm(bill_length_mm ~ body_mass_g, penguins))
summary(f1 <- lm(bill_length_mm ~ body_mass_g, penguins))
f1
penguins <- penguins %>%
mutate(body_mass_kg = body_mass_g/1000)
summary(f1 <- lm(bill_length_mm ~ body_mass_kg, penguins))
summary(f1 <- lm(bill_length_mm ~ ., penguins))
summary(f1 <- lm(bill_length_mm ~ . - body_mass_kg, penguins))
summary(f1 <- lm(bill_length_mm ~ . -body_mass_g, penguins))
## ok a bit easier to talk about, see how it is changed by 1000!
summary(f1 <- lm(bill_length_mm ~ body_mass_kg, penguins))
summary(f2 <- lm(bill_length_mm ~ . -body_mass_g, penguins))
AIC(f1, f2)
penguins <- penguins %>%
mutate(body_mass_kg = body_mass_g/1000) %>%
drop_na()
## ok a bit easier to talk about, see how it is changed by 1000!
summary(f1 <- lm(bill_length_mm ~ body_mass_kg, penguins))
summary(f2 <- lm(bill_length_mm ~ . -body_mass_g, penguins))
AIC(f1, f2)
library(broom)
tidy(f2)
tidy(f2) %>%
ggplot(aes(x=term, y = estimate)) +
geom_point() +
coord_flip()
tidy(f2) %>%
filter(term != "(Intercept)") %>%
ggplot(aes(x=term, y = estimate)) +
geom_point() +
coord_flip()
summary(f2 <- lm(bill_length_mm ~ . -body_mass_g - year, penguins))
AIC(f1, f2)
library(broom)
tidy(f2) %>%
filter(term != "(Intercept)") %>%
ggplot(aes(x=term, y = estimate)) +
geom_point() +
coord_flip()
summary(f2 <- lm(bill_length_mm ~ body_mass_kg + species, penguins))
summary(f3 <- lm(bill_length_mm ~ . -body_mass_g - year, penguins))
AIC(f1, f2, f3)
# now let's tidy with broom
library(broom)
tidy(f2) %>%
filter(term != "(Intercept)") %>%
ggplot(aes(x=term, y = estimate)) +
geom_point() +
coord_flip()
tidy(f3) %>%
filter(term != "(Intercept)") %>%
ggplot(aes(x=term, y = estimate)) +
geom_point() +
coord_flip()
summary(f2)
summary(f3)
plot_residual_hist <- function(fit){
tibble(residual = fit$residuals) %>%
ggplot(aes(x=residual)) +
geom_histogram()
}
plot_qq <- function(fit){
tibble(residual = fit$residuals) %>%
ggplot(aes(sample = residual)) + # NOTE: stat_qq* expect a sample aesthetic
stat_qq() +
stat_qq_line() +
labs(x="Theoretical quantile", y = "Observed quantile")
}
plot_residual_predicted <- function(fit){
tibble(
predicted = fit$fitted.values,
residual = fit$residuals
) %>%
ggplot(aes(x = predicted, y = residual)) +
geom_point() +
geom_hline(yintercept = 0)
}
plot_residual_predicted(f1)
plot_residual_predicted(f1) + geom_point(aes(color=species))
f1$df.residual
f1$call
f1$model
plot_residual_predicted(f1)
plot_residual_predicted(f2)
summary(f2 <- lm(bill_length_mm ~ body_mass_kg + species + sex, penguins))
plot_residual_predicted(f2)
summary(f2 <- lm(bill_length_mm ~ body_mass_kg + species, penguins))
plot_residual_predicted(f2)
plot_qq(f2)
# let's look at residuals
plot_qq(f1)
plot_residual_predicted(f1)
plot_residual_hist(f1)
plot_residual_hist(f2)
# let's look at residuals
plot_residual_hist(f1)
plot_qq(f1)
plot_residual_predicted(f1)
penguines %>%
mutate(
predicted = f2$fitted.values,
residual = f2$residuals
) %>%
ggplot(aes(x = predicted, y = residual, color = species)) +
geom_point() +
geom_hline(yintercept = 0)
penguins %>%
mutate(
predicted = f2$fitted.values,
residual = f2$residuals
) %>%
ggplot(aes(x = predicted, y = residual, color = species)) +
geom_point() +
geom_hline(yintercept = 0)
penguins %>%
mutate(
predicted = f1$fitted.values,
residual = f1$residuals
) %>%
ggplot(aes(x = predicted, y = residual, color = species)) +
geom_point() +
geom_hline(yintercept = 0)
summary(f3 <- lm(bill_length_mm ~ ., penguins))
summary(f3 <- lm(bill_length_mm ~ . - body_mass_kg, penguins))
AIC(f1, f2, f3)
# now let's tidy with broom
library(broom)
tidy(f3) %>%
filter(term != "(Intercept)") %>%
ggplot(aes(x=term, y = estimate)) +
geom_point() +
coord_flip()
f3$model
f3$qr
# jump right in to making a fit
summary(f1 <- lm(bill_length_mm ~ body_mass_g, penguins))
## ok a bit easier to talk about, see how it is changed by 1000!
summary(f1 <- lm(bill_length_mm ~ body_mass_kg, penguins))
plot(f1)
plot_residual_hist(f1)
plot_qq(f1)
plot_residual_predicted(f1)
plot_residual_predicted(f1) + geom_smooth()
plot_residual_predicted(f1) + geom_smooth(method="lm")
plot_residual_predicted(f1)
plot_residual_predicted(f2)
plot_residual_hist(f3)
plot_qq(f3)
plot_residual_predicted(f3)
plot_qq(f2)
plot_qq(f3)
?geom_qq
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +
geom_point()
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_length_mm)) +
geom_point()
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +
geom_point()
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_length_mm, color = sex)) +
geom_point()
summary(f2 <- lm(bill_length_mm ~ body_mass_kg, penguins))
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +
geom_point()
summary(f2 <- lm(bill_length_mm ~ body_mass_kg, penguins))
plot_residual_hist(f2)
plot_qq(f2)
summary(f2 <- lm(bill_length_mm ~ body_mass_kg, penguins))
plot_residual_hist(f2)
plot_qq(f2)
summary(f2 <- lm(bill_length_mm ~ body_mass_kg + sex, penguins))
plot_residual_hist(f2)
plot_qq(f2)
summary(f2 <- lm(bill_length_mm ~ body_mass_kg + sex + species, penguins))
plot_residual_hist(f2)
plot_qq(f2)
summary(f2 <- lm(bill_length_mm ~ body_mass_kg + species, penguins))
plot_residual_hist(f2)
plot_qq(f2)
plot_residual_predicted(f2)
summary(f2 <- lm(bill_length_mm ~ body_mass_kg + species, penguins))
plot_residual_hist(f2)
plot_qq(f2)
plot_residual_predicted(f2)
penguins %>%
mutate(
predicted = f1$fitted.values,
residual = f1$residuals
) %>%
ggplot(aes(x = predicted, y = residual, color = species)) +
geom_point() +
geom_hline(yintercept = 0)
glimpse(penguins)
skim(penguins)
glimpse(penguins)
source('assets/setup.R')
library(tidyverse)
# library(modelr)
library(dsbox)
library(broom)
source("starter/m8-helpers.R")
# :::red : use for pre-lab activity instructions
# :::lo : use for outlining the learning objectives
# :::green : use for tips on how to complete the task --- I've been using more for "extra info" DP
# :::yellow : use for additional information on how to use R that does not directly have anything to do with the assignment tasks
# :::frame : use when want to set some additional instructions/code/examples apart from the assignment task when explaining something about how to use R
# :::blue : same color as question box background. Not sure how much this needs to be used.
# :::statbox : looks a lot like yellow
library(tidyverse)
library(dsbox)
data(dcbikeshare)
dcbikeshare
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

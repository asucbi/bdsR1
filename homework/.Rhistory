ggplot(aes(x=Years, y = prop, ymin = prop-sd, ymax=prop+sd)) +
geom_pointrange()
fb %>%
group_by(Years) %>%
mutate(concuss = if_else(Group == "FBNoConcuss", 0, 1)) %>%
summarize(prop = mean(concuss), cnt = n()) %>%
ggplot(aes(x=Years, y = prop, size=cnt)) +
geom_point()
fb %>%
group_by(Years) %>%
mutate(concuss = if_else(Group == "FBNoConcuss", 0, 1)) %>%
summarize(prop = mean(concuss), cnt = n()) %>%
ggplot(aes(x=Years, y = prop, color = cnt)) +
geom_point()
fb %>%
group_by(Years) %>%
mutate(concuss = if_else(Group == "FBNoConcuss", 0, 1)) %>%
summarize(prop = mean(concuss), count = n()) %>%
ggplot(aes(x=Years, y = prop, color = count)) +
geom_point()
fb %>%
group_by(Years) %>%
mutate(concuss = if_else(Group == "FBNoConcuss", 0, 1)) %>%
summarize(prop = mean(concuss), count = n()) %>%
ggplot(aes(x=Years, y = prop, color = count)) +
geom_col()
fb %>%
group_by(Years) %>%
mutate(concuss = if_else(Group == "FBNoConcuss", 0, 1)) %>%
summarize(prop = mean(concuss), count = n()) %>%
ggplot(aes(x=Years, y = prop, color = count)) +
geom_point()
fb %>%
group_by(Years) %>%
mutate(concuss = if_else(Group == "FBNoConcuss", 0, 1)) %>%
summarize(prop = mean(concuss), count = n()) %>%
ggplot(aes(x=Years, y = prop, size = count)) +
geom_point()
fb %>%
group_by(Years) %>%
mutate(concuss = if_else(Group == "FBNoConcuss", 0, 1)) %>%
summarize(prop = mean(concuss), count = n()) %>%
ggplot(aes(x=Years, y = prop, label = count)) +
geom_text()
fb %>%
group_by(Years) %>%
mutate(concuss = if_else(Group == "FBNoConcuss", 0, 1)) %>%
summarize(prop = mean(concuss), count = n()) %>%
ggplot(aes(x=Years, y = prop, size = count)) +
geom_point()
summary(fit1 <- lm(LeftHipp ~ Years, fb))
summary(fit2 <-  lm(LeftHipp ~ Years + Group, fb))
AIC(fit1, fit2)
summary(fit2 <-  lm(Hipp ~ Years + Group, fb))
summary(fit1 <- lm(Hipp ~ Years, fb))
AIC(fit1, fit2)
summary(lm(RT ~ Hipp + Years + Group, fb))
summary(lm(RT ~ Hipp + Years + Group, fb))
summary(lm(RT ~ Hipp + LeftHipp + Years + Group, fb))
summary(lm(RT ~ Hipp + Years + Group, fb))
summary(fit2 <-  lm(Hipp ~ Years*Group, fb))
AIC(fit1, fit2)
summary(fit2 <-  lm(Hipp ~ Years + Group, fb))
summary(lm(RT ~ ., fb))
summary(lm(RT ~ Hipp + Years + Group, fb))
summary(lm(RT ~ Hipp + Group, fb))
summary(lm(RT ~ Group, fb))
summary(lm(RT ~ Hipp + Group, fb))
summary(lm(RT ~ Hipp*Group, fb))
summary(lm(RT ~ Hipp + Group, fb))
summary(lm(RT ~ Hipp + Group, fb))
summary(lm(RT ~ Group, fb))
summary(lm(RT ~ Hipp + Group, fb))
summary(fit2 <-  lm(Hipp ~ Years + Group, fb))
summary(fit1 <- lm(Hipp ~ Years, fb))
summary(fit2 <-  lm(Hipp ~ Years + Group, fb))
AIC(fit1, fit2)
AIC(fit1, fit2)
summary(fit2 <-  lm(Hipp ~ Years + Group, fb))
summary(fit3 <-  lm(Hipp ~ Years * Group, fb))
AIC(fit1, fit2, fit3)
summary(fit5 <- lm(RT ~ Years + Group, fb))
summary(fit5 <- lm(RT ~ Years, fb))
summary(fit5 <- lm(RT ~ Years + Group, fb))
summary(fit5 <- lm(RT ~ Hipp + Years + Group, fb))
summary(fit5 <- lm(RT ~ Hipp + Group, fb))
summary(fit5 <- lm(RT ~ Hipp + Years + Group, fb))
summary(fit5 <- lm(RT ~ Hipp + Years + Group, fb))
summary(fit5 <- lm(RT ~ Hipp + Group, fb))
d <- fb %>%
mutate_at(vars(Hipp, Years, RT), standardize)
center <- function(x){
x - mean(x)
}
standardize <- function(x){
center(x)/sd(x)
}
d <- fb %>%
mutate_at(vars(Hipp, Years, RT), standardize)
summary(lm(RT ~ Years, d))
summary(lm(RT ~ Years + Hipp, d))
summary(lm(RT ~ Years, d))
summary(fit4 <- lm(RT ~ Hipp, fb))
standardize <- function(x){
(x - mean(x))/sd(x)
}
d <- fb_standardized %>%
mutate_at(vars(Hipp, Years, RT), standardize)
standardize <- function(x){
(x - mean(x))/sd(x)
}
fb_standardized <- fb %>%
mutate_at(vars(Hipp, Years, RT), standardize)
fit4_s <- lm(RT ~ Hipp, fb)
summary(lm(fit5_s <- RT ~ Years, fb_standardized))
summary(fit4_s <- lm(RT ~ Hipp, fb))
summary(lm(fit5_s <- RT ~ Years, fb_standardized))
standardize <- function(x){
(x - mean(x))/sd(x)
}
fb_standardized <- fb %>%
mutate_at(vars(Hipp, Years, RT), standardize)
summary(fit4_s <- lm(RT ~ Hipp, fb))
summary(lm(fit5_s <- RT ~ Years, fb_standardized))
standardize <- function(x){
(x - mean(x))/sd(x)
}
fb_standardized <- fb %>%
mutate_at(vars(Hipp, Years, RT), standardize)
summary(fit4_s <- lm(RT ~ Hipp, fb_standardized))
summary(lm(fit5_s <- RT ~ Years, fb_standardized))
coefs(lm(fit5_s <- RT ~ Years, fb_standardized))
standardize <- function(x){
(x - mean(x))/sd(x)
}
fb_standardized <- fb %>%
mutate_at(vars(Hipp, Years, RT), standardize)
coef(fit4_s <- lm(RT ~ Hipp, fb_standardized))
coef(fit5_s <- lm( RT ~ Years, fb_standardized))
standardize <- function(x){
(x - mean(x))/sd(x)
}
fb_standardized <- fb %>%
mutate_at(vars(Hipp, Years, RT), standardize)
coef(fit4_s <- lm(RT ~ Hipp + Years, fb_standardized))
coef(fit5_s <- lm( RT ~ Years, fb_standardized))
coef(fit1_s <- lm(RT ~ Hipp, fb_standardized))
coef(fit2_s <- lm(RT ~ Years, fb_standardized))
coef(fit3_s <- lm(RT ~ Hipp + Years, fb_standardized))
### Exercise 13
coef(fit1_s <- lm(RT ~ Hipp, fb_standardized))
coef(fit2_s <- lm(RT ~ Years, fb_standardized))
coef(fit3_s <- lm(RT ~ Hipp + Years, fb_standardized))
fb <- read_csv("data/FootballBrain.csv")
write_csv(fb, "data/FootballBrain2.csv")
fb <- read_csv("data/FootballBrain2.csv")
head(fb)
fb <- read_csv("data/FootballBrain2.csv")
head(fb)
fb <- read_csv("data/FootballBrain.csv") %>%
rename(RT = Cogniton)
write_csv(fb, "data/FootballBrain2.csv")
fb <- read_csv("data/FootballBrain.csv") %>%
rename(RT = Cogniton)
fb <- read_csv("data/FootballBrain.csv")
head(fb)
head(fb)
library(tidyverse)
data(iris)
iris
summary(lm(Sepal.Length ~ Sepal.Width, iris))
summary(lm(Sepal.Length ~ Pedal.Length, iris))
summary(lm(Sepal.Length ~ Petal.Length, iris))
plot(iris$Sepal.Length, iris$Petal.Length)
summary(lm(Sepal.Length ~ Petal.Length + Species, iris))
library(palmerpenguins)
data("penguins")
penguins
lm(flipper_length_mm ~ body_mass_g, penguins)
summary(lm(flipper_length_mm ~ body_mass_g, penguins))
plot(penguins$flipper_length_mm, penguins$body_mass_g)
plot(penguins$flipper_length_mm, penguins$bill_length_mm)
plot(penguins$bill_length_mm, penguins$body_mass_g)
summary(lm(bill_length_mm ~ body_mass_g, penguins))
head(penguins)
summary(lm(bill_length_mm ~ body_mass_g + species, penguins))
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_length_mm)) +
geom_point()
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +
geom_point()
summary(lm(bill_length_mm ~ body_mass_g, penguins))
summary(f1 <- lm(bill_length_mm ~ body_mass_g, penguins))
f1
penguins <- penguins %>%
mutate(body_mass_kg = body_mass_g/1000)
summary(f1 <- lm(bill_length_mm ~ body_mass_kg, penguins))
summary(f1 <- lm(bill_length_mm ~ ., penguins))
summary(f1 <- lm(bill_length_mm ~ . - body_mass_kg, penguins))
summary(f1 <- lm(bill_length_mm ~ . -body_mass_g, penguins))
## ok a bit easier to talk about, see how it is changed by 1000!
summary(f1 <- lm(bill_length_mm ~ body_mass_kg, penguins))
summary(f2 <- lm(bill_length_mm ~ . -body_mass_g, penguins))
AIC(f1, f2)
penguins <- penguins %>%
mutate(body_mass_kg = body_mass_g/1000) %>%
drop_na()
## ok a bit easier to talk about, see how it is changed by 1000!
summary(f1 <- lm(bill_length_mm ~ body_mass_kg, penguins))
summary(f2 <- lm(bill_length_mm ~ . -body_mass_g, penguins))
AIC(f1, f2)
library(broom)
tidy(f2)
tidy(f2) %>%
ggplot(aes(x=term, y = estimate)) +
geom_point() +
coord_flip()
tidy(f2) %>%
filter(term != "(Intercept)") %>%
ggplot(aes(x=term, y = estimate)) +
geom_point() +
coord_flip()
summary(f2 <- lm(bill_length_mm ~ . -body_mass_g - year, penguins))
AIC(f1, f2)
library(broom)
tidy(f2) %>%
filter(term != "(Intercept)") %>%
ggplot(aes(x=term, y = estimate)) +
geom_point() +
coord_flip()
summary(f2 <- lm(bill_length_mm ~ body_mass_kg + species, penguins))
summary(f3 <- lm(bill_length_mm ~ . -body_mass_g - year, penguins))
AIC(f1, f2, f3)
# now let's tidy with broom
library(broom)
tidy(f2) %>%
filter(term != "(Intercept)") %>%
ggplot(aes(x=term, y = estimate)) +
geom_point() +
coord_flip()
tidy(f3) %>%
filter(term != "(Intercept)") %>%
ggplot(aes(x=term, y = estimate)) +
geom_point() +
coord_flip()
summary(f2)
summary(f3)
plot_residual_hist <- function(fit){
tibble(residual = fit$residuals) %>%
ggplot(aes(x=residual)) +
geom_histogram()
}
plot_qq <- function(fit){
tibble(residual = fit$residuals) %>%
ggplot(aes(sample = residual)) + # NOTE: stat_qq* expect a sample aesthetic
stat_qq() +
stat_qq_line() +
labs(x="Theoretical quantile", y = "Observed quantile")
}
plot_residual_predicted <- function(fit){
tibble(
predicted = fit$fitted.values,
residual = fit$residuals
) %>%
ggplot(aes(x = predicted, y = residual)) +
geom_point() +
geom_hline(yintercept = 0)
}
plot_residual_predicted(f1)
plot_residual_predicted(f1) + geom_point(aes(color=species))
f1$df.residual
f1$call
f1$model
plot_residual_predicted(f1)
plot_residual_predicted(f2)
summary(f2 <- lm(bill_length_mm ~ body_mass_kg + species + sex, penguins))
plot_residual_predicted(f2)
summary(f2 <- lm(bill_length_mm ~ body_mass_kg + species, penguins))
plot_residual_predicted(f2)
plot_qq(f2)
# let's look at residuals
plot_qq(f1)
plot_residual_predicted(f1)
plot_residual_hist(f1)
plot_residual_hist(f2)
# let's look at residuals
plot_residual_hist(f1)
plot_qq(f1)
plot_residual_predicted(f1)
penguines %>%
mutate(
predicted = f2$fitted.values,
residual = f2$residuals
) %>%
ggplot(aes(x = predicted, y = residual, color = species)) +
geom_point() +
geom_hline(yintercept = 0)
penguins %>%
mutate(
predicted = f2$fitted.values,
residual = f2$residuals
) %>%
ggplot(aes(x = predicted, y = residual, color = species)) +
geom_point() +
geom_hline(yintercept = 0)
penguins %>%
mutate(
predicted = f1$fitted.values,
residual = f1$residuals
) %>%
ggplot(aes(x = predicted, y = residual, color = species)) +
geom_point() +
geom_hline(yintercept = 0)
summary(f3 <- lm(bill_length_mm ~ ., penguins))
summary(f3 <- lm(bill_length_mm ~ . - body_mass_kg, penguins))
AIC(f1, f2, f3)
# now let's tidy with broom
library(broom)
tidy(f3) %>%
filter(term != "(Intercept)") %>%
ggplot(aes(x=term, y = estimate)) +
geom_point() +
coord_flip()
f3$model
f3$qr
# jump right in to making a fit
summary(f1 <- lm(bill_length_mm ~ body_mass_g, penguins))
## ok a bit easier to talk about, see how it is changed by 1000!
summary(f1 <- lm(bill_length_mm ~ body_mass_kg, penguins))
plot(f1)
plot_residual_hist(f1)
plot_qq(f1)
plot_residual_predicted(f1)
plot_residual_predicted(f1) + geom_smooth()
plot_residual_predicted(f1) + geom_smooth(method="lm")
plot_residual_predicted(f1)
plot_residual_predicted(f2)
plot_residual_hist(f3)
plot_qq(f3)
plot_residual_predicted(f3)
plot_qq(f2)
plot_qq(f3)
?geom_qq
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +
geom_point()
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_length_mm)) +
geom_point()
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +
geom_point()
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_length_mm, color = sex)) +
geom_point()
summary(f2 <- lm(bill_length_mm ~ body_mass_kg, penguins))
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +
geom_point()
summary(f2 <- lm(bill_length_mm ~ body_mass_kg, penguins))
plot_residual_hist(f2)
plot_qq(f2)
summary(f2 <- lm(bill_length_mm ~ body_mass_kg, penguins))
plot_residual_hist(f2)
plot_qq(f2)
summary(f2 <- lm(bill_length_mm ~ body_mass_kg + sex, penguins))
plot_residual_hist(f2)
plot_qq(f2)
summary(f2 <- lm(bill_length_mm ~ body_mass_kg + sex + species, penguins))
plot_residual_hist(f2)
plot_qq(f2)
summary(f2 <- lm(bill_length_mm ~ body_mass_kg + species, penguins))
plot_residual_hist(f2)
plot_qq(f2)
plot_residual_predicted(f2)
summary(f2 <- lm(bill_length_mm ~ body_mass_kg + species, penguins))
plot_residual_hist(f2)
plot_qq(f2)
plot_residual_predicted(f2)
penguins %>%
mutate(
predicted = f1$fitted.values,
residual = f1$residuals
) %>%
ggplot(aes(x = predicted, y = residual, color = species)) +
geom_point() +
geom_hline(yintercept = 0)
glimpse(penguins)
skim(penguins)
glimpse(penguins)
source('assets/setup.R')
library(tidyverse)
# library(modelr)
library(dsbox)
library(broom)
source("starter/m8-helpers.R")
# :::red : use for pre-lab activity instructions
# :::lo : use for outlining the learning objectives
# :::green : use for tips on how to complete the task --- I've been using more for "extra info" DP
# :::yellow : use for additional information on how to use R that does not directly have anything to do with the assignment tasks
# :::frame : use when want to set some additional instructions/code/examples apart from the assignment task when explaining something about how to use R
# :::blue : same color as question box background. Not sure how much this needs to be used.
# :::statbox : looks a lot like yellow
library(tidyverse)
library(dsbox)
data(dcbikeshare)
dcbikeshare
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
# Load necessary library
library(fs)
# Define the path to your Quarto file
quarto_file <- "mod-01-hello-r.qmd"
# Define the output directory where you want the extra copy
output_dir <- "../docs/hws"
# Render the Quarto file
quarto::quarto_render(quarto_file)
# Construct the file paths
original_html <- paste0(tools::file_path_sans_ext(quarto_file), ".html")
destination_html <- file.path(output_dir, basename(original_html))
# Create the directory if it doesn't exist
dir_create(output_dir)
# Copy the file
file_copy(original_html, destination_html, overwrite = TRUE)
# Load necessary library
library(fs)
# Define the path to your Quarto file
quarto_file <- "mod-01-hello-r.qmd"
# Define the output directory where you want the extra copy
output_dir <- "../docs/hws"
# Render the Quarto file
quarto::quarto_render(quarto_file)
# Construct the file paths
original_html <- paste0(tools::file_path_sans_ext(quarto_file), ".html")
destination_html <- file.path(output_dir, basename(original_html))
# Create the directory if it doesn't exist
dir_create(output_dir)
# Copy the file
file_copy(original_html, destination_html, overwrite = TRUE)
# Load necessary library
library(fs)
# Define the path to your Quarto file
# quarto_file <- "mod-01-hello-r.qmd"
quarto_file <- "mod-02-phx-salaries.qmd"
# Define the output directory where you want the extra copy
output_dir <- "../docs/hws"
# Render the Quarto file
quarto::quarto_render(quarto_file)
# Construct the file paths
original_html <- paste0(tools::file_path_sans_ext(quarto_file), ".html")
destination_html <- file.path(output_dir, basename(original_html))
# Create the directory if it doesn't exist
dir_create(output_dir)
# Copy the file
file_copy(original_html, destination_html, overwrite = TRUE)
# Load necessary library
library(fs)
# Define the path to your Quarto file
# quarto_file <- "mod-01-hello-r.qmd"
# quarto_file <- "mod-02-phx-salaries.qmd"
quarto_file <- "mod-03-phx-accidents.qmd"
# Define the output directory where you want the extra copy
output_dir <- "../docs/hws"
# Render the Quarto file
quarto::quarto_render(quarto_file)
# Construct the file paths
original_html <- paste0(tools::file_path_sans_ext(quarto_file), ".html")
destination_html <- file.path(output_dir, basename(original_html))
# Create the directory if it doesn't exist
dir_create(output_dir)
# Copy the file
file_copy(original_html, destination_html, overwrite = TRUE)
# Load necessary library
library(fs)
# Define the path to your Quarto file
# quarto_file <- "mod-01-hello-r.qmd"
# quarto_file <- "mod-02-phx-salaries.qmd"
# quarto_file <- "mod-03-phx-accidents.qmd"
quarto_file <- "mod-04-college-majors.qmd"
# Define the output directory where you want the extra copy
output_dir <- "../docs/hws"
# Render the Quarto file
quarto::quarto_render(quarto_file)
# Construct the file paths
original_html <- paste0(tools::file_path_sans_ext(quarto_file), ".html")
destination_html <- file.path(output_dir, basename(original_html))
# Create the directory if it doesn't exist
dir_create(output_dir)
# Copy the file
file_copy(original_html, destination_html, overwrite = TRUE)
# Load necessary library
library(fs)
# Define the path to your Quarto file
# quarto_file <- "mod-01-hello-r.qmd"
# quarto_file <- "mod-02-phx-salaries.qmd"
# quarto_file <- "mod-03-phx-accidents.qmd"
# quarto_file <- "mod-04-college-majors.qmd"
quarto_file <- "mod-05-legos.qmd"
# Define the output directory where you want the extra copy
output_dir <- "../docs/hws"
# Render the Quarto file
quarto::quarto_render(quarto_file)
# Construct the file paths
original_html <- paste0(tools::file_path_sans_ext(quarto_file), ".html")
destination_html <- file.path(output_dir, basename(original_html))
# Create the directory if it doesn't exist
dir_create(output_dir)
# Copy the file
file_copy(original_html, destination_html, overwrite = TRUE)

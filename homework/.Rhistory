plot(penguins$flipper_length_mm, penguins$bill_length_mm)
plot(penguins$bill_length_mm, penguins$body_mass_g)
summary(lm(bill_length_mm ~ body_mass_g, penguins))
head(penguins)
summary(lm(bill_length_mm ~ body_mass_g + species, penguins))
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_length_mm)) +
geom_point()
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +
geom_point()
summary(lm(bill_length_mm ~ body_mass_g, penguins))
summary(f1 <- lm(bill_length_mm ~ body_mass_g, penguins))
f1
penguins <- penguins %>%
mutate(body_mass_kg = body_mass_g/1000)
summary(f1 <- lm(bill_length_mm ~ body_mass_kg, penguins))
summary(f1 <- lm(bill_length_mm ~ ., penguins))
summary(f1 <- lm(bill_length_mm ~ . - body_mass_kg, penguins))
summary(f1 <- lm(bill_length_mm ~ . -body_mass_g, penguins))
## ok a bit easier to talk about, see how it is changed by 1000!
summary(f1 <- lm(bill_length_mm ~ body_mass_kg, penguins))
summary(f2 <- lm(bill_length_mm ~ . -body_mass_g, penguins))
AIC(f1, f2)
penguins <- penguins %>%
mutate(body_mass_kg = body_mass_g/1000) %>%
drop_na()
## ok a bit easier to talk about, see how it is changed by 1000!
summary(f1 <- lm(bill_length_mm ~ body_mass_kg, penguins))
summary(f2 <- lm(bill_length_mm ~ . -body_mass_g, penguins))
AIC(f1, f2)
library(broom)
tidy(f2)
tidy(f2) %>%
ggplot(aes(x=term, y = estimate)) +
geom_point() +
coord_flip()
tidy(f2) %>%
filter(term != "(Intercept)") %>%
ggplot(aes(x=term, y = estimate)) +
geom_point() +
coord_flip()
summary(f2 <- lm(bill_length_mm ~ . -body_mass_g - year, penguins))
AIC(f1, f2)
library(broom)
tidy(f2) %>%
filter(term != "(Intercept)") %>%
ggplot(aes(x=term, y = estimate)) +
geom_point() +
coord_flip()
summary(f2 <- lm(bill_length_mm ~ body_mass_kg + species, penguins))
summary(f3 <- lm(bill_length_mm ~ . -body_mass_g - year, penguins))
AIC(f1, f2, f3)
# now let's tidy with broom
library(broom)
tidy(f2) %>%
filter(term != "(Intercept)") %>%
ggplot(aes(x=term, y = estimate)) +
geom_point() +
coord_flip()
tidy(f3) %>%
filter(term != "(Intercept)") %>%
ggplot(aes(x=term, y = estimate)) +
geom_point() +
coord_flip()
summary(f2)
summary(f3)
plot_residual_hist <- function(fit){
tibble(residual = fit$residuals) %>%
ggplot(aes(x=residual)) +
geom_histogram()
}
plot_qq <- function(fit){
tibble(residual = fit$residuals) %>%
ggplot(aes(sample = residual)) + # NOTE: stat_qq* expect a sample aesthetic
stat_qq() +
stat_qq_line() +
labs(x="Theoretical quantile", y = "Observed quantile")
}
plot_residual_predicted <- function(fit){
tibble(
predicted = fit$fitted.values,
residual = fit$residuals
) %>%
ggplot(aes(x = predicted, y = residual)) +
geom_point() +
geom_hline(yintercept = 0)
}
plot_residual_predicted(f1)
plot_residual_predicted(f1) + geom_point(aes(color=species))
f1$df.residual
f1$call
f1$model
plot_residual_predicted(f1)
plot_residual_predicted(f2)
summary(f2 <- lm(bill_length_mm ~ body_mass_kg + species + sex, penguins))
plot_residual_predicted(f2)
summary(f2 <- lm(bill_length_mm ~ body_mass_kg + species, penguins))
plot_residual_predicted(f2)
plot_qq(f2)
# let's look at residuals
plot_qq(f1)
plot_residual_predicted(f1)
plot_residual_hist(f1)
plot_residual_hist(f2)
# let's look at residuals
plot_residual_hist(f1)
plot_qq(f1)
plot_residual_predicted(f1)
penguines %>%
mutate(
predicted = f2$fitted.values,
residual = f2$residuals
) %>%
ggplot(aes(x = predicted, y = residual, color = species)) +
geom_point() +
geom_hline(yintercept = 0)
penguins %>%
mutate(
predicted = f2$fitted.values,
residual = f2$residuals
) %>%
ggplot(aes(x = predicted, y = residual, color = species)) +
geom_point() +
geom_hline(yintercept = 0)
penguins %>%
mutate(
predicted = f1$fitted.values,
residual = f1$residuals
) %>%
ggplot(aes(x = predicted, y = residual, color = species)) +
geom_point() +
geom_hline(yintercept = 0)
summary(f3 <- lm(bill_length_mm ~ ., penguins))
summary(f3 <- lm(bill_length_mm ~ . - body_mass_kg, penguins))
AIC(f1, f2, f3)
# now let's tidy with broom
library(broom)
tidy(f3) %>%
filter(term != "(Intercept)") %>%
ggplot(aes(x=term, y = estimate)) +
geom_point() +
coord_flip()
f3$model
f3$qr
# jump right in to making a fit
summary(f1 <- lm(bill_length_mm ~ body_mass_g, penguins))
## ok a bit easier to talk about, see how it is changed by 1000!
summary(f1 <- lm(bill_length_mm ~ body_mass_kg, penguins))
plot(f1)
plot_residual_hist(f1)
plot_qq(f1)
plot_residual_predicted(f1)
plot_residual_predicted(f1) + geom_smooth()
plot_residual_predicted(f1) + geom_smooth(method="lm")
plot_residual_predicted(f1)
plot_residual_predicted(f2)
plot_residual_hist(f3)
plot_qq(f3)
plot_residual_predicted(f3)
plot_qq(f2)
plot_qq(f3)
?geom_qq
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +
geom_point()
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_length_mm)) +
geom_point()
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +
geom_point()
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_length_mm, color = sex)) +
geom_point()
summary(f2 <- lm(bill_length_mm ~ body_mass_kg, penguins))
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_length_mm, color = species)) +
geom_point()
summary(f2 <- lm(bill_length_mm ~ body_mass_kg, penguins))
plot_residual_hist(f2)
plot_qq(f2)
summary(f2 <- lm(bill_length_mm ~ body_mass_kg, penguins))
plot_residual_hist(f2)
plot_qq(f2)
summary(f2 <- lm(bill_length_mm ~ body_mass_kg + sex, penguins))
plot_residual_hist(f2)
plot_qq(f2)
summary(f2 <- lm(bill_length_mm ~ body_mass_kg + sex + species, penguins))
plot_residual_hist(f2)
plot_qq(f2)
summary(f2 <- lm(bill_length_mm ~ body_mass_kg + species, penguins))
plot_residual_hist(f2)
plot_qq(f2)
plot_residual_predicted(f2)
summary(f2 <- lm(bill_length_mm ~ body_mass_kg + species, penguins))
plot_residual_hist(f2)
plot_qq(f2)
plot_residual_predicted(f2)
penguins %>%
mutate(
predicted = f1$fitted.values,
residual = f1$residuals
) %>%
ggplot(aes(x = predicted, y = residual, color = species)) +
geom_point() +
geom_hline(yintercept = 0)
glimpse(penguins)
skim(penguins)
glimpse(penguins)
source('assets/setup.R')
library(tidyverse)
# library(modelr)
library(dsbox)
library(broom)
source("starter/m8-helpers.R")
# :::red : use for pre-lab activity instructions
# :::lo : use for outlining the learning objectives
# :::green : use for tips on how to complete the task --- I've been using more for "extra info" DP
# :::yellow : use for additional information on how to use R that does not directly have anything to do with the assignment tasks
# :::frame : use when want to set some additional instructions/code/examples apart from the assignment task when explaining something about how to use R
# :::blue : same color as question box background. Not sure how much this needs to be used.
# :::statbox : looks a lot like yellow
library(tidyverse)
library(dsbox)
data(dcbikeshare)
dcbikeshare
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
# Load necessary library
library(fs)
# Define the path to your Quarto file
quarto_file <- "mod-01-hello-r.qmd"
# Define the output directory where you want the extra copy
output_dir <- "../docs/hws"
# Render the Quarto file
quarto::quarto_render(quarto_file)
# Construct the file paths
original_html <- paste0(tools::file_path_sans_ext(quarto_file), ".html")
destination_html <- file.path(output_dir, basename(original_html))
# Create the directory if it doesn't exist
dir_create(output_dir)
# Copy the file
file_copy(original_html, destination_html, overwrite = TRUE)
# Load necessary library
library(fs)
# Define the path to your Quarto file
quarto_file <- "mod-01-hello-r.qmd"
# Define the output directory where you want the extra copy
output_dir <- "../docs/hws"
# Render the Quarto file
quarto::quarto_render(quarto_file)
# Construct the file paths
original_html <- paste0(tools::file_path_sans_ext(quarto_file), ".html")
destination_html <- file.path(output_dir, basename(original_html))
# Create the directory if it doesn't exist
dir_create(output_dir)
# Copy the file
file_copy(original_html, destination_html, overwrite = TRUE)
# Load necessary library
library(fs)
# Define the path to your Quarto file
# quarto_file <- "mod-01-hello-r.qmd"
quarto_file <- "mod-02-phx-salaries.qmd"
# Define the output directory where you want the extra copy
output_dir <- "../docs/hws"
# Render the Quarto file
quarto::quarto_render(quarto_file)
# Construct the file paths
original_html <- paste0(tools::file_path_sans_ext(quarto_file), ".html")
destination_html <- file.path(output_dir, basename(original_html))
# Create the directory if it doesn't exist
dir_create(output_dir)
# Copy the file
file_copy(original_html, destination_html, overwrite = TRUE)
# Load necessary library
library(fs)
# Define the path to your Quarto file
# quarto_file <- "mod-01-hello-r.qmd"
# quarto_file <- "mod-02-phx-salaries.qmd"
quarto_file <- "mod-03-phx-accidents.qmd"
# Define the output directory where you want the extra copy
output_dir <- "../docs/hws"
# Render the Quarto file
quarto::quarto_render(quarto_file)
# Construct the file paths
original_html <- paste0(tools::file_path_sans_ext(quarto_file), ".html")
destination_html <- file.path(output_dir, basename(original_html))
# Create the directory if it doesn't exist
dir_create(output_dir)
# Copy the file
file_copy(original_html, destination_html, overwrite = TRUE)
# Load necessary library
library(fs)
# Define the path to your Quarto file
# quarto_file <- "mod-01-hello-r.qmd"
# quarto_file <- "mod-02-phx-salaries.qmd"
# quarto_file <- "mod-03-phx-accidents.qmd"
quarto_file <- "mod-04-college-majors.qmd"
# Define the output directory where you want the extra copy
output_dir <- "../docs/hws"
# Render the Quarto file
quarto::quarto_render(quarto_file)
# Construct the file paths
original_html <- paste0(tools::file_path_sans_ext(quarto_file), ".html")
destination_html <- file.path(output_dir, basename(original_html))
# Create the directory if it doesn't exist
dir_create(output_dir)
# Copy the file
file_copy(original_html, destination_html, overwrite = TRUE)
# Load necessary library
library(fs)
# Define the path to your Quarto file
# quarto_file <- "mod-01-hello-r.qmd"
# quarto_file <- "mod-02-phx-salaries.qmd"
# quarto_file <- "mod-03-phx-accidents.qmd"
# quarto_file <- "mod-04-college-majors.qmd"
quarto_file <- "mod-05-legos.qmd"
# Define the output directory where you want the extra copy
output_dir <- "../docs/hws"
# Render the Quarto file
quarto::quarto_render(quarto_file)
# Construct the file paths
original_html <- paste0(tools::file_path_sans_ext(quarto_file), ".html")
destination_html <- file.path(output_dir, basename(original_html))
# Create the directory if it doesn't exist
dir_create(output_dir)
# Copy the file
file_copy(original_html, destination_html, overwrite = TRUE)
library(robotstxt)
library(rvest)
library(tidyverse)
library(glue)
library(lubridate)
paths_allowed("https://www.politifact.com/", warn=FALSE)
first_url <- "https://www.politifact.com/factchecks/list/?ruling=pants-fire"
page <- read_html(first_url)
statements <- page %>%
html_nodes(".m-statement__quote") %>%
html_text2
links <- page %>%
html_nodes(".m-statement__quote") %>%
html_element("a") %>%
html_attr("href") %>%
str_c("https://www.politifact.com", .)
sources <- page %>%
html_nodes(".m-statement__name") %>%
html_text2
descriptions <- page %>%
html_nodes(".m-statement__desc") %>%
html_text2
first_thirty <- tibble(
source = sources,
statement = statements,
description = descriptions,
link = links
)
second_url <- "https://www.politifact.com/factchecks/list/?page=2&ruling=pants-fire"
statements <- page %>%
html_nodes(".m-statement__quote") %>%
html_text2
### Link
links <- page %>%
html_nodes(".m-statement__quote") %>%
html_element("a") %>%
html_attr("href") %>%
str_c("https://www.politifact.com", .)
sources <- page %>%
html_nodes(".m-statement__name") %>%
html_text2
descriptions <- page %>%
html_nodes(".m-statement__desc") %>%
html_text2
second_thirty <- tibble(
source = sources,
statement = statements,
description = descriptions,
link = links
)
second_thirty
scrape_page <- function(url){
# read page
page <- read_html(url)
### Statement
statements <- page %>%
html_nodes(".m-statement__quote") %>%
html_text2
### Link
links <- page %>%
html_nodes(".m-statement__quote") %>%
html_element("a") %>%
html_attr("href") %>%
str_c("https://www.politifact.com", .)
### Source
sources <- page %>%
html_nodes(".m-statement__name") %>%
html_text2
### Description
descriptions <- page %>%
html_nodes(".m-statement__desc") %>%
html_text2
tibble(
source = sources,
statement = statements,
description = descriptions,
link = links)
}
prefix <- "https://www.politifact.com/factchecks/list/?page="
suffix <- "&ruling=pants-fire"
numbers <- seq(from = 1, to = 20, by = 1)
urls <- glue('{prefix}', '{numbers}', '{suffix}')
fact_checks_lie <- map_dfr(urls, scrape_page)
## NEED TO RUN IN ORDER TO GENERATE KEYS
write_csv(fact_checks_lie, file = "/Users/nduran4/Dropbox (ASU)/Mac/Desktop/GitProjects/BDS1/bdsR1-online-keys/assignment-keys/labs/data/fact_checks_lie.csv")
## NEED TO RUN IN ORDER TO GENERATE KEYS
write_csv(fact_checks_truth, file = "/Users/nduran4/Desktop/GitProjects/BDS1/bdsR1-ground-keys/assignment-keys/labs/data/fact_checks_truth.csv")
## NEED TO RUN IN ORDER TO GENERATE KEYS
write_csv(fact_checks_lie, file = "/Users/nduran4/Desktop/GitProjects/BDS1/bdsR1-ground-keys/assignment-keys/labs/data/fact_checks_lie.csv")
prefix <- "https://www.politifact.com/factchecks/list/?page="
suffix <- "&ruling=mostly-true"
numbers <- seq(from = 1, to = 20, by = 1)
urls <- glue('{prefix}', '{numbers}', '{suffix}')
# map over all urls and output a data frame ------------------------------------
fact_checks_truth <- map_dfr(urls, scrape_page)
## NEED TO RUN IN ORDER TO GENERATE KEYS
write_csv(fact_checks_truth, file = "/Users/nduran4/Desktop/GitProjects/BDS1/bdsR1-ground-keys/assignment-keys/labs/data/fact_checks_truth.csv")
## NEED TO RUN IN ORDER TO GENERATE KEYS
write_csv(fact_checks_truth, file = "/Users/nduran4/Desktop/GitProjects/BDS1/bdsR1-ground-keys/assignment-keys/labs/data/fact_checks_truth.csv")
fact_checks <- rows_append(fact_checks_lie, fact_checks_truth)
fact_checks <- fact_checks %>%
separate(description, into = c("before", "date", "media"),
sep = "on|in", remove = TRUE) %>%
select(-before)
library(lubridate)
fact_checks <- fact_checks %>%
mutate(date = mdy(date))
library(skimr)
skim(fact_checks)
# the answer here is going to vary from class to class but should be easy for students to figure out
fact_checks %>%
filter(type == "lie") %>%
count(source, sort=TRUE) %>%
filter(n >= 3)
fact_checks_lie <- fact_checks_lie %>% add_column(type = "lie")
fact_checks_truth <- fact_checks_truth %>% add_column(type = "truth")
fact_checks <- rows_append(fact_checks_lie, fact_checks_truth)
fact_checks <- fact_checks %>%
separate(description, into = c("before", "date", "media"),
sep = "on|in", remove = TRUE) %>%
select(-before)
library(lubridate)
fact_checks <- fact_checks %>%
mutate(date = mdy(date))
library(skimr)
skim(fact_checks)
fact_checks %>%
filter(type == "lie") %>%
count(source, sort=TRUE) %>%
filter(n >= 3)
fact_checks %>%
filter(type == "lie" & str_detect(statement, "Biden"))
fact_checks %>%
filter(type == "lie" & str_detect(statement, "Trump"))
library(tidyverse)
fact_checks_lie <- read_csv("data/fact_checks_lie.csv")
fact_checks_truth <- read_csv("data/fact_checks_truth.csv")
## ANSWER KEY
fact_checks_lie <- fact_checks_lie %>% add_column(type = "lie")
fact_checks_truth <- fact_checks_truth %>% add_column(type = "truth")
fact_checks <- rows_append(fact_checks_lie, fact_checks_truth)
head(fact_checks)
## ANSWER KEY
fact_checks <- fact_checks %>%
separate(description, into = c("before", "date", "media"),
sep = "on|in", remove = TRUE) %>%
select(-before)
head(fact_checks)
## ANSWER KEY
library(lubridate)
fact_checks <- fact_checks %>%
mutate(date = mdy(date))
head(fact_checks)
## ANSWER KEY
library(skimr)
skim(fact_checks)
## ANSWER KEY
fact_checks %>%
filter(type == "lie") %>%
count(source, sort=TRUE) %>%
filter(n >= 3)
## ANSWER KEY
fact_checks %>%
filter(type == "lie" & str_detect(statement, "Biden")) %>% nrow()
fact_checks %>%
filter(type == "lie" & str_detect(statement, "Trump")) %>% nrow()
View(fact_checks)
pac_all <- read_csv(here("data", "pac-all.csv"))
#| message: false
#| eval: true
library(tidyverse)
library(robotstxt)
library(rvest)
library(scales)
#| message: false
#| eval: true
#| echo: false
library(kableExtra)
library(here)
pac_all <- read_csv(here("data", "pac-all.csv"))
pac_all <- read_csv(here("homework/data", "pac-all.csv"))

nrow(pac_all)
pac_all <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/GitProjects/CBI-BDS1/bdsR1/nicksandbox/hw-lab-keys/mod-06-hw-key/data/pac-all.csv")
head(pac_all)
nrow(pac_all)
str(pac_all)
dim(pac_all)
dim(pac_all)[2]
library(tidyverse)
library(rvest)
library(scales)
pac_all <- read.csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/GitProjects/CBI-BDS1/bdsR1/nicksandbox/hw-lab-keys/mod-06-hw-key/data/pac-all.csv")
pac_all2 <- pac_all %>% separate(country_parent, c("country", "parent"), sep="/", extra = "merge")
head(pac_all2,n=10)
pac_all3 <- pac_all2 %>%
mutate(total = str_remove(total, "\\$"), total = str_remove_all(total, ",")) %>%
mutate(dems = str_remove(dems, "\\$"), dems = str_remove_all(dems, ",")) %>%
mutate(repubs = str_remove(repubs, "\\$"), repubs = str_remove_all(repubs, ","))
pac_all3$total <- as.integer(pac_all3$total)
pac_all3$dems <- as.integer(pac_all3$dems)
pac_all3$repubs <- as.integer(pac_all3$repubs)
head(pac_all3,n=10)
time <- rep(1:10, 10)
time
response <- rnorm(n) + time + time^2 * 0.5
set.seed(1234)
n <- 100
subject <- factor(rep(1:10, each = 10))
time <- rep(1:10, 10)
response <- rnorm(n) + time + time^2 * 0.5 # quadratic trend
response
ggplot(response) +
geom_line()
plot(response)
library(tidyverse)
getwd()
dataread = read_csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.xlsx")
head(dataread)
dataread = read_csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
head(dataread)
names(dataread)
dataread <- dataread %>% select(Participant, Call1, Suspicion1, CodeCallerGender, Emotion1, EmotionMC)
head(dataread)
library(tidyverse)
library(skimr)
dataread <- read_csv("/Users/nduran4/Dropbox (ASU)/Mac/Desktop/Online911Data_ForGraphing.csv")
dataread <- dataread %>% select(Participant, Call1, Suspicion1, CodeCallerGender, Emotion1, EmotionMC)
skim(dataread)
ggplot(dataread, aes(Emotion1)) +
geom_histogram()
ggplot(dataread, aes(Emotion1)) +
geom_histogram()
ggplot(dataread, aes(Emotion1)) +
geom_bar()
ggplot(dataread, aes(Emotion1)) +
geom_bar() + facet_grid(~CodeCallerGender)
ggplot(dataread, aes(Emotion1)) +
geom_bar() + facet_wrap(~CodeCallerGender)
ggplot(dataread, aes(Emotion1)) +
geom_bar() + facet_wrap(CodeCallerGender)
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
geom_point(aes(color=x)) +  # Scatter plot
geom_smooth(method='lm', se=FALSE, color='red') +  # Linear regression line
theme_minimal() +
labs(title="Scatterplot of x and y with Linear Regression Line",
x="Variable X",
y="Variable Y")
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
geom_point(aes(color=Emotion1)) +  # Scatter plot
geom_smooth(method='lm', se=FALSE, color='red') +  # Linear regression line
theme_minimal() +
labs(title="Scatterplot of x and y with Linear Regression Line",
x="Variable X",
y="Variable Y")
pairs(dataread)
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
geom_density_2d_filled() +
theme_minimal() +
labs(title="Density Plot of x and y")
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
geom_point(aes(color=Emotion1)) +  # Scatter plot
geom_smooth(method='lm', se=FALSE, color='red') +  # Linear regression line +
facet_wrap(~CodeCallerGender) +
theme_minimal() +
labs(title="Scatterplot of x and y with Linear Regression Line",
x="Variable X",
y="Variable Y")
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
geom_density_2d_filled() +
theme_minimal() +
labs(title="Density Plot of x and y")
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
geom_point(alpha = .5) +
stat_summary(geom = "point", fun = mean, color = "red", size = 3)
# scale_x_binned(n.breaks = 30)
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
# geom_point(alpha = .5) +
stat_summary(geom = "point", fun = mean, color = "red", size = 3)
# scale_x_binned(n.breaks = 30)
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
# geom_point(alpha = .5) +
stat_summary(geom = "point", fun = mean, color = "red", size = 3) +
facet_wrap(~CodeCallerGender)
dataread$CodeCallerGender
View(dataread)
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
geom_point(aes(color=Emotion1)) +  # Scatter plot
geom_smooth(method='lm', se=FALSE, color='red') +  # Linear regression line +
facet_wrap(~CodeCallerGender) +
theme_minimal() +
labs(title="Scatterplot of x and y with Linear Regression Line",
x="Variable X",
y="Variable Y")
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
# geom_point(alpha = .5) +
stat_summary(geom = "point", fun = mean, color = "red", size = 3) +
facet_wrap(~CodeCallerGender)
# scale_x_binned(n.breaks = 30)
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
geom_point(aes(color=Emotion1)) +  # Scatter plot
geom_smooth(method='lm', se=FALSE, color='red') +  # Linear regression line +
# facet_wrap(~CodeCallerGender) +
theme_minimal() +
labs(title="Scatterplot of x and y with Linear Regression Line",
x="Variable X",
y="Variable Y")
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
# geom_point(alpha = .5) +
stat_summary(geom = "point", fun = mean, color = "red", size = 3)
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
# geom_point(alpha = .5) +
stat_summary(geom = "point", fun = mean, color = "red", size = 3) +
facet_wrap(~CodeCallerGender)
# scale_x_binned(n.breaks = 30)
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
# geom_point(alpha = .5) +
stat_summary(geom = "point", fun = mean, color = "red", size = 3)
# facet_wrap(~CodeCallerGender)
# scale_x_binned(n.breaks = 30)
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
geom_point(aes(color=Emotion1)) +  # Scatter plot
geom_smooth(method='lm', se=FALSE, color='red') +  # Linear regression line +
# facet_wrap(~CodeCallerGender) +
theme_minimal() +
labs(title="Scatterplot of x and y with Linear Regression Line",
x="Variable X",
y="Variable Y")
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
# geom_point(alpha = .5) +
stat_summary(geom = "point", fun = mean, color = "red", size = 3) +
facet_wrap(~CodeCallerGender)
# scale_x_binned(n.breaks = 30)
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
geom_point(aes(color=Emotion1)) +  # Scatter plot
geom_smooth(method='lm', se=FALSE, color='red') +  # Linear regression line +
# facet_wrap(~CodeCallerGender) +
theme_minimal() +
labs(title="Scatterplot of x and y with Linear Regression Line",
x="Variable X",
y="Variable Y")
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
# geom_point(alpha = .5) +
stat_summary(geom = "point", fun = mean, color = "red", size = 3) +
facet_wrap(~CodeCallerGender)
# scale_x_binned(n.breaks = 30)
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n())
df_summary
ggplot(dataread, aes(x=Emotion1, y=Suspicion1)) +
# geom_point(alpha = .5) +
stat_summary(geom = "point", fun = mean, color = "red", size = 3)
# facet_wrap(~CodeCallerGender)
# scale_x_binned(n.breaks = 30)
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count, alpha = 0.7), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=5)) +  # Adjust legend breaks if needed
labs(title = "Average Return by Age Bin",
x = "Age Bin",
y = "Average Return",
size = "Number of Data Points") +
theme_minimal()
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count, alpha = 0.7), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=50)) +  # Adjust legend breaks if needed
labs(title = "Average Return by Age Bin",
x = "Age Bin",
y = "Average Return",
size = "Number of Data Points") +
theme_minimal()
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=50)) +  # Adjust legend breaks if needed
labs(title = "Average Return by Age Bin",
x = "Age Bin",
y = "Average Return",
size = "Number of Data Points") +
theme_minimal()
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=50)) +  # Adjust legend breaks if needed
labs(title = "Average Return by Age Bin",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points") +
theme_minimal()
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=50)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points") +
theme_minimal()
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=50)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points Contributing to Average") +
theme_minimal()
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=50)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points\n Contributing to Average") +
theme_minimal()
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=50)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
df_summary
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.2) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=50)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
df_summary
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.2) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
df_summary <- dataread %>%
group_by(Emotion1) %>%
summarise(mean_sus_return = mean(Suspicion1, na.rm = TRUE),
count = n(),
sd_sus_return = sd(Suspicion1, na.rm = TRUE)) %>%
mutate(se_sus_return = sd_sus_return / sqrt(count))  # Calculate standard error
# Plotting
ggplot(df_summary, aes(x = Emotion1, y = mean_sus_return)) +
geom_point(aes(size = count), color = "blue") +  # Adjusted point sizes based on count and a bit of transparency
geom_errorbar(aes(ymin = mean_sus_return - se_sus_return,
ymax = mean_sus_return + se_sus_return), width = 0.1) +
scale_size_continuous(guide = "legend", breaks = seq(0, max(df_summary$count), by=100)) +  # Adjust legend breaks if needed
labs(title = "Average Suspicion by Emotion Level",
x = "Emotion",
y = "Suspicion",
size = "Number of Data Points\nContributing to Average") +
theme_minimal()
